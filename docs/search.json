[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Kindly Noted",
    "section": "",
    "text": "1 Preface\nThis book documents the ecosystem of tools and libraries around the Kindly convention.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Preface</span>"
    ]
  },
  {
    "objectID": "index.html#in-this-book",
    "href": "index.html#in-this-book",
    "title": "Kindly Noted",
    "section": "1.1 In this book",
    "text": "1.1 In this book\n\nKindly intro\nCatalogue of visualization kinds\nKind compatibility matrix\nEmmy-viewers\nKindly-advice - to help tools support Kindly\n\n\nsource: notebooks/index.clj",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Preface</span>"
    ]
  },
  {
    "objectID": "kindly.html",
    "href": "kindly.html",
    "title": "2  Kindly",
    "section": "",
    "text": "2.1 Why\nKindly is a standard for requesting data visualizations in Clojure.\nIt specifies in what kinds of way Clojure forms and values should be displayed.\nDifferent tools have had different ways of writing notes. For example:",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Kindly</span>"
    ]
  },
  {
    "objectID": "kindly.html#why",
    "href": "kindly.html#why",
    "title": "2  Kindly",
    "section": "",
    "text": "Anglican tutorials (source) - written in Gorilla REPL\nthi-ng/geom viz examples (source) - written in Org-babel-clojure\nClojure2d docs (source1, source2) - written in Codox and Metadoc\nTablecloth API docs (source) - written in rmarkdown-clojure\nR interop ClojisR examples (source) - written in Notespace v2\nBayesian optimization tutorial (source) - written in Nextjournal\nscicloj.ml tutorials (source) - written in Notespace v3\nClojure2d color tutorial (source) - written in Clerk\nTablecloth documentation (source) - written in Kindly using Clay\n…",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Kindly</span>"
    ]
  },
  {
    "objectID": "kindly.html#goal",
    "href": "kindly.html#goal",
    "title": "2  Kindly",
    "section": "2.2 Goal",
    "text": "2.2 Goal\n\nHave a standard way to request data visualizations\nfor blog posts, books, slideshows, reports, dashboards, and interactive analyses,\nthat just will work across different tools,\nwithout even mentioning those tools in the code.\nWe aim for copy/paste compatibility of visualisation code accross different tools:\n\nas it is a given for normal Clojure code producing textual output in a text oriented repl,\nvisualisation code working in one tool should produce the same or very similar result in all compatible tools.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Kindly</span>"
    ]
  },
  {
    "objectID": "kindly.html#status",
    "href": "kindly.html#status",
    "title": "2  Kindly",
    "section": "2.3 Status",
    "text": "2.3 Status\n\nsupported by Clay\nimplemented a partially working adapter for Portal (kind-portal)\nimplemented a partially working adapter for Clerk (kind-clerk)\nactively working to support other tools such as Cursive, Calva, and Clojupyter",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Kindly</span>"
    ]
  },
  {
    "objectID": "kindly.html#existing-booknotebook-projects-using-kindly",
    "href": "kindly.html#existing-booknotebook-projects-using-kindly",
    "title": "2  Kindly",
    "section": "2.4 Existing book/notebook projects using Kindly",
    "text": "2.4 Existing book/notebook projects using Kindly\n\nTablecloth documentation\nFastmath 3 documentation\nClojisR documentation\nWolframite documentation\nClay documentation\nKindly-noted - documenting the ecosystem around Kindly - WIP\nNoj documentation - WIP\nClojure Tidy Tuesdays data-science explorations\nClojure Data Tutorials\nClojure Data Scrapbook\nLLMs tutorial (in spanish) by Kyle Passarelli\nStatistical Computing in Clojure: Functional Approaches to Unsupervised Learning by Jaryt Salvo",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Kindly</span>"
    ]
  },
  {
    "objectID": "kindly.html#example",
    "href": "kindly.html#example",
    "title": "2  Kindly",
    "section": "2.5 Example",
    "text": "2.5 Example\nHere is how one may request something of kind/md, which means Markdown:\n\n(kind/md\n \"hello *hello* **hello**\")\n\nhello hello hello",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Kindly</span>"
    ]
  },
  {
    "objectID": "kindly.html#the-set-of-kinds",
    "href": "kindly.html#the-set-of-kinds",
    "title": "2  Kindly",
    "section": "2.6 The set of kinds",
    "text": "2.6 The set of kinds\n\n(sort kindly/known-kinds)\n\n\n(:kind/code\n :kind/cytoscape\n :kind/dataset\n :kind/echarts\n :kind/edn\n :kind/emmy-viewers\n :kind/fn\n :kind/fragment\n :kind/hiccup\n :kind/hidden\n :kind/highcharts\n :kind/html\n :kind/htmlwidgets-ggplotly\n :kind/htmlwidgets-plotly\n :kind/image\n :kind/map\n :kind/md\n :kind/observable\n :kind/plotly\n :kind/portal\n :kind/pprint\n :kind/reagent\n :kind/scittle\n :kind/seq\n :kind/set\n :kind/smile-model\n :kind/table\n :kind/test\n :kind/test-last\n :kind/tex\n :kind/var\n :kind/vector\n :kind/vega\n :kind/vega-lite\n :kind/video)\n\nYou can find more (details and examples of using these kinds)[/kindly-noted/kinds.html] in the Kindly book.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Kindly</span>"
    ]
  },
  {
    "objectID": "kindly.html#how-to-use-kinds",
    "href": "kindly.html#how-to-use-kinds",
    "title": "2  Kindly",
    "section": "2.7 How to use Kinds?",
<<<<<<< HEAD
    "text": "2.7 How to use Kinds?\n\n2.7.1 Attaching metadata to forms\n\n^:kind/md\n[\"hello *hello* **hello**\"]\n\nhello hello hello\n\n^kind/md\n[\"hello *hello* **hello**\"]\n\nhello hello hello\n\n\n2.7.2 Attaching metadata to values\n\n(-&gt; [\"hello *hello* **hello**\"]\n    kind/md)\n\nhello hello hello\n\n(-&gt; [\"hello *hello* **hello**\"]\n    kind/md\n    meta\n    :kindly/kind)\n\n\n:kind/md\n\n\n\n2.7.3 Attaching metadata to values - cont.\n\n(-&gt; \"hello *hello* **hello**\"\n    kind/md\n    meta\n    :kindly/kind)\n\n\n:kind/md\n\nValues that cannot have metadata are wrapped in a vector before attaching metadata.\n\n(-&gt; \"hello *hello* **hello**\"\n    kind/md\n    kind/pprint)\n\n\n[\"hello *hello* **hello**\"]\n\n\n(-&gt; \"hello *hello* **hello**\"\n    kind/md\n    meta)\n\n\n#:kindly{:kind :kind/md, :options nil}\n\n\n\n2.7.4 Using values annotated by libraries\n\n(defn my-library-function-for-big-big-text [text]\n  (kind/hiccup\n   [:big {:style {:background \"#ccddcc\"}}\n    [:big text]]))\n\n\n(-&gt; \"hello\"\n    my-library-function-for-big-big-text)\n\nhello\n\n(-&gt; \"hello\"\n    my-library-function-for-big-big-text\n    (assoc-in [1 :style]\n              {:background \"#ddccdd\"}))\n\nhello\n\n\n2.7.5 Automatically-inferred kinds\nIn certain situations, kinds are inferred without annotation. The kindly-advice library provides the default inference behaviour and an option to extend it.\nFor example, images:\n\n(def clj-image\n  (-&gt;  \"https://upload.wikimedia.org/wikipedia/commons/e/eb/Ash_Tree_-_geograph.org.uk_-_590710.jpg\"\n       (java.net.URL.)\n       (javax.imageio.ImageIO/read)))\n\n\nclj-image\n\n\n\n\n\n(require '[tablecloth.api :as tc])\n\n\n(tc/dataset {:x (range 3)\n             :y (repeatedly 3 rand)})\n\n\n_unnamed [3 2]:\n\n\n\n:x\n:y\n\n\n\n\n0\n0.04402647\n\n\n1\n0.66929177\n\n\n2\n0.85563235",
=======
    "text": "2.7 How to use Kinds?\n\n2.7.1 Attaching metadata to forms\n\n^:kind/md\n[\"hello *hello* **hello**\"]\n\nhello hello hello\n\n^kind/md\n[\"hello *hello* **hello**\"]\n\nhello hello hello\n\n\n2.7.2 Attaching metadata to values\n\n(-&gt; [\"hello *hello* **hello**\"]\n    kind/md)\n\nhello hello hello\n\n(-&gt; [\"hello *hello* **hello**\"]\n    kind/md\n    meta\n    :kindly/kind)\n\n\n:kind/md\n\n\n\n2.7.3 Attaching metadata to values - cont.\n\n(-&gt; \"hello *hello* **hello**\"\n    kind/md\n    meta\n    :kindly/kind)\n\n\n:kind/md\n\nValues that cannot have metadata are wrapped in a vector before attaching metadata.\n\n(-&gt; \"hello *hello* **hello**\"\n    kind/md\n    kind/pprint)\n\n\n[\"hello *hello* **hello**\"]\n\n\n(-&gt; \"hello *hello* **hello**\"\n    kind/md\n    meta)\n\n\n#:kindly{:kind :kind/md, :options nil}\n\n\n\n2.7.4 Using values annotated by libraries\n\n(defn my-library-function-for-big-big-text [text]\n  (kind/hiccup\n   [:big {:style {:background \"#ccddcc\"}}\n    [:big text]]))\n\n\n(-&gt; \"hello\"\n    my-library-function-for-big-big-text)\n\nhello\n\n(-&gt; \"hello\"\n    my-library-function-for-big-big-text\n    (assoc-in [1 :style]\n              {:background \"#ddccdd\"}))\n\nhello\n\n\n2.7.5 Automatically-inferred kinds\nIn certain situations, kinds are inferred without annotation. The kindly-advice library provides the default inference behaviour and an option to extend it.\nFor example, images:\n\n(def clj-image\n  (-&gt;  \"https://upload.wikimedia.org/wikipedia/commons/e/eb/Ash_Tree_-_geograph.org.uk_-_590710.jpg\"\n       (java.net.URL.)\n       (javax.imageio.ImageIO/read)))\n\n\nclj-image\n\n\n\n\n\n(require '[tablecloth.api :as tc])\n\n\n(tc/dataset {:x (range 3)\n             :y (repeatedly 3 rand)})\n\n\n_unnamed [3 2]:\n\n\n\n:x\n:y\n\n\n\n\n0\n0.26508487\n\n\n1\n0.42896762\n\n\n2\n0.24557929",
>>>>>>> feb0693846b701aef12dd252e2d37396dc0dfa43
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Kindly</span>"
    ]
  },
  {
    "objectID": "kindly.html#hiding-code",
    "href": "kindly.html#hiding-code",
    "title": "2  Kindly",
    "section": "2.8 Hiding code",
    "text": "2.8 Hiding code\nTo hide the the code of a given form and only show the output, here are a few options:\n\nAdd the metadata :kindly/hide-code true to the form (e.g., by preceding it with ^:kindly/hide-code).\nAdd the metadata :kindly/hide-code true to the value (e.g., using vary-meta).\nSome tools such as Clay allow the user to globally define certain kinds (e.g., :kind/md, :kind/hiccup) to always hide code",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Kindly</span>"
    ]
  },
  {
    "objectID": "kindly.html#passing-options",
    "href": "kindly.html#passing-options",
    "title": "2  Kindly",
    "section": "2.9 Passing options",
    "text": "2.9 Passing options\nThe functions in the kind namespace may recieve an additiona map argument, which is attached at the :kindly/options key of a value’s metadata.\n\n(def echarts-example\n  {:title {:text \"Echarts Example\"}\n   :tooltip {}\n   :legend {:data [\"sales\"]}\n   :xAxis {:data [\"Shirts\", \"Cardigans\", \"Chiffons\",\n                  \"Pants\", \"Heels\", \"Socks\"]}\n   :yAxis {}\n   :series [{:name \"sales\"\n             :type \"bar\"\n             :data [5 20 36\n                    10 10 20]}]})\n\n\n(kind/echarts\n echarts-example)\n\n\n\n(-&gt; echarts-example\n    (kind/echarts {:element/style\n                   {:width \"500px\"\n                    :height \"200px\"}}))\n\n\n\n(-&gt; echarts-example\n    (kind/echarts {:element/style\n                   {:width \"500px\"\n                    :height \"200px\"}})\n    meta)\n\n\n#:kindly{:kind :kind/echarts,\n         :options #:element{:style {:width \"500px\", :height \"200px\"}}}",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Kindly</span>"
    ]
  },
  {
    "objectID": "kindly.html#fragments",
    "href": "kindly.html#fragments",
    "title": "2  Kindly",
    "section": "2.10 Fragments",
    "text": "2.10 Fragments\nkind/fragment is a special kind. It expects a sequential value and generates multiple items, of potentially multiple kinds, from its elements.\n\n(-&gt;&gt; [\"purple\" \"darkgreen\" \"goldenrod\"]\n     (mapcat (fn [color]\n               [(kind/md (str \"### subsection: \" color))\n                (kind/hiccup [:div {:style {:background-color color\n                                            :color \"lightgrey\"}}\n                              [:big [:p color]]])]))\n     kind/fragment)\n\n\n2.10.1 subsection: purple\npurple\n\n\n2.10.2 subsection: darkgreen\ndarkgreen\n\n\n2.10.3 subsection: goldenrod\ngoldenrod\n\nsource: notebooks/kindly.clj",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Kindly</span>"
    ]
  },
  {
    "objectID": "kinds.html",
    "href": "kinds.html",
    "title": "3  Catalogue of visualization kinds",
    "section": "",
    "text": "3.1 Plain values\nValues with no kind are displayed the default way each tool would display them. In Clay, they are simply pretty-printed.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Catalogue of visualization kinds</span>"
    ]
  },
  {
    "objectID": "kinds.html#plain-values",
    "href": "kinds.html#plain-values",
    "title": "3  Catalogue of visualization kinds",
    "section": "",
    "text": "(+  4 5)\n\n\n9\n\n\n(str \"abcd\" \"efgh\")\n\n\n\"abcdefgh\"",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Catalogue of visualization kinds</span>"
    ]
  },
  {
    "objectID": "kinds.html#plain-data-structures",
    "href": "kinds.html#plain-data-structures",
    "title": "3  Catalogue of visualization kinds",
    "section": "3.2 Plain data structures",
<<<<<<< HEAD
    "text": "3.2 Plain data structures\nBy default (according to kindly/advice), plain Clojure data structures: vectors, other sequentials (lists/seqs/ranges/etc.), sets, and maps, are assigned the kinds kind/vector, kind/seq, , kind/set, and kind/map, respectively.\nEach tool may have its own way to display these kinds. For example, Clay just uses text, while Portal has a hierarchical navigation UI.\n\n(list 1 \"A\" :B 'C)\n\n\n(1 \"A\" :B C)\n\n\n(range 9)\n\n\n(0 1 2 3 4 5 6 7 8)\n\n\n[1 \"A\" :B 'C]\n\n\n[1 \"A\" :B C]\n\n\n#{1 \"A\" :B 'C}\n\n\n#{1 :B C \"A\"}\n\n\n{1 \"A\" :B 'C}\n\n\n{1 \"A\", :B C}\n\nMore examples:\n\n(def people-as-maps\n  (-&gt;&gt; (range 29)\n       (mapv (fn [i]\n               {:preferred-language ([\"clojure\" \"clojurescript\" \"babashka\"]\n                                     (rand-int 3))\n                :age (rand-int 100)}))))\n\n\npeople-as-maps\n\n\n[{:preferred-language \"clojure\", :age 89}\n {:preferred-language \"clojure\", :age 6}\n {:preferred-language \"clojure\", :age 90}\n {:preferred-language \"babashka\", :age 63}\n {:preferred-language \"babashka\", :age 20}\n {:preferred-language \"babashka\", :age 30}\n {:preferred-language \"clojure\", :age 89}\n {:preferred-language \"clojure\", :age 79}\n {:preferred-language \"clojure\", :age 82}\n {:preferred-language \"babashka\", :age 81}\n {:preferred-language \"clojure\", :age 56}\n {:preferred-language \"clojurescript\", :age 10}\n {:preferred-language \"clojure\", :age 85}\n {:preferred-language \"clojure\", :age 55}\n {:preferred-language \"clojure\", :age 4}\n {:preferred-language \"clojure\", :age 75}\n {:preferred-language \"clojurescript\", :age 99}\n {:preferred-language \"clojurescript\", :age 72}\n {:preferred-language \"clojurescript\", :age 63}\n {:preferred-language \"clojurescript\", :age 92}\n {:preferred-language \"babashka\", :age 10}\n {:preferred-language \"clojurescript\", :age 3}\n {:preferred-language \"clojurescript\", :age 17}\n {:preferred-language \"clojure\", :age 68}\n {:preferred-language \"clojure\", :age 86}\n {:preferred-language \"babashka\", :age 46}\n {:preferred-language \"clojurescript\", :age 34}\n {:preferred-language \"clojurescript\", :age 36}\n {:preferred-language \"clojurescript\", :age 95}]\n\n\n(def people-as-vectors\n  (-&gt;&gt; people-as-maps\n       (mapv (juxt :preferred-language :age))))\n\n\npeople-as-vectors\n\n\n[[\"clojure\" 89]\n [\"clojure\" 6]\n [\"clojure\" 90]\n [\"babashka\" 63]\n [\"babashka\" 20]\n [\"babashka\" 30]\n [\"clojure\" 89]\n [\"clojure\" 79]\n [\"clojure\" 82]\n [\"babashka\" 81]\n [\"clojure\" 56]\n [\"clojurescript\" 10]\n [\"clojure\" 85]\n [\"clojure\" 55]\n [\"clojure\" 4]\n [\"clojure\" 75]\n [\"clojurescript\" 99]\n [\"clojurescript\" 72]\n [\"clojurescript\" 63]\n [\"clojurescript\" 92]\n [\"babashka\" 10]\n [\"clojurescript\" 3]\n [\"clojurescript\" 17]\n [\"clojure\" 68]\n [\"clojure\" 86]\n [\"babashka\" 46]\n [\"clojurescript\" 34]\n [\"clojurescript\" 36]\n [\"clojurescript\" 95]]\n\nThese kinds have recursive kind semantics: if the values inside them have kind information, they should be handled accordingly.\nHere is a vector of things of different kinds inside:\n\n[(kind/hiccup\n  [:div {:style\n         {:background-color \"floralwhite\"}}\n   [:p \"hello\"]])\n (kind/md\n  \"hello *hello* **hello**\")\n (kind/code\n  \"(defn f [x] (+  x 9))\")]\n\n[hellohello hello hello(defn f [x] (+  x 9))]\nAnd here is a map:\n\n{:x  (kind/md\n      \"**hello**\")\n (kind/md\n  \"**hello**\") :x}\n\n{\n\n\n\n\n\n\n\n\n:x\n\n\n\nhello\n\n\n\n\n\n\n\n\n\n\n\n\n\nhello\n\n\n\n:x\n\n\n\n\n\n}\nHere is a more detailed example:\n\n{:vector-of-numbers [2 9 -1]\n :vector-of-different-things [\"hi\"\n                              (kind/hiccup\n                               [:big [:big \"hello\"]])]\n :map-of-different-things {:markdown (kind/md [\"*hi*, **hi**\"])\n                           :number 9999}\n :hiccup (kind/hiccup\n          [:big [:big \"bye\"]])\n :dataset (tc/dataset {:x (range 3)\n                       :y [:A :B :C]})}\n\n{:vector-of-numbers [2 9 -1]\n\n\n\n\n\n\n\n\n:vector-of-different-things\n\n\n\n[\n\n\n\"hi\"\n\nhello\n\n]\n\n\n\n\n\n\n\n\n\n\n\n\n\n:map-of-different-things\n\n\n\n{\n\n\n\n\n\n\n\n\n\n:markdown\n\n\n\nhi, hi\n\n\n\n\n\n\n:number 9999\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n:hiccup\n\n\nbye\n\n\n\n\n\n\n\n\n\n\n\n\n:dataset\n\n\n\n_unnamed [3 2]:\n\n\n\n:x\n:y\n\n\n\n\n0\n:A\n\n\n1\n:B\n\n\n2\n:C\n\n\n\n\n\n\n\n\n}",
=======
    "text": "3.2 Plain data structures\nBy default (according to kindly/advice), plain Clojure data structures: vectors, other sequentials (lists/seqs/ranges/etc.), sets, and maps, are assigned the kinds kind/vector, kind/seq, , kind/set, and kind/map, respectively.\nEach tool may have its own way to display these kinds. For example, Clay just uses text, while Portal has a hierarchical navigation UI.\n\n(list 1 \"A\" :B 'C)\n\n\n(1 \"A\" :B C)\n\n\n(range 9)\n\n\n(0 1 2 3 4 5 6 7 8)\n\n\n[1 \"A\" :B 'C]\n\n\n[1 \"A\" :B C]\n\n\n#{1 \"A\" :B 'C}\n\n\n#{1 :B C \"A\"}\n\n\n{1 \"A\" :B 'C}\n\n\n{1 \"A\", :B C}\n\nMore examples:\n\n(def people-as-maps\n  (-&gt;&gt; (range 29)\n       (mapv (fn [i]\n               {:preferred-language ([\"clojure\" \"clojurescript\" \"babashka\"]\n                                     (rand-int 3))\n                :age (rand-int 100)}))))\n\n\npeople-as-maps\n\n\n[{:preferred-language \"clojurescript\", :age 60}\n {:preferred-language \"babashka\", :age 6}\n {:preferred-language \"clojure\", :age 62}\n {:preferred-language \"clojurescript\", :age 10}\n {:preferred-language \"clojurescript\", :age 28}\n {:preferred-language \"clojure\", :age 62}\n {:preferred-language \"babashka\", :age 69}\n {:preferred-language \"clojure\", :age 37}\n {:preferred-language \"clojurescript\", :age 33}\n {:preferred-language \"clojure\", :age 43}\n {:preferred-language \"babashka\", :age 85}\n {:preferred-language \"clojurescript\", :age 67}\n {:preferred-language \"clojure\", :age 40}\n {:preferred-language \"clojure\", :age 84}\n {:preferred-language \"clojure\", :age 26}\n {:preferred-language \"clojurescript\", :age 65}\n {:preferred-language \"clojure\", :age 58}\n {:preferred-language \"clojurescript\", :age 98}\n {:preferred-language \"babashka\", :age 87}\n {:preferred-language \"clojurescript\", :age 80}\n {:preferred-language \"babashka\", :age 11}\n {:preferred-language \"clojurescript\", :age 23}\n {:preferred-language \"clojurescript\", :age 12}\n {:preferred-language \"clojure\", :age 63}\n {:preferred-language \"clojure\", :age 14}\n {:preferred-language \"babashka\", :age 48}\n {:preferred-language \"babashka\", :age 55}\n {:preferred-language \"babashka\", :age 53}\n {:preferred-language \"clojure\", :age 76}]\n\n\n(def people-as-vectors\n  (-&gt;&gt; people-as-maps\n       (mapv (juxt :preferred-language :age))))\n\n\npeople-as-vectors\n\n\n[[\"clojurescript\" 60]\n [\"babashka\" 6]\n [\"clojure\" 62]\n [\"clojurescript\" 10]\n [\"clojurescript\" 28]\n [\"clojure\" 62]\n [\"babashka\" 69]\n [\"clojure\" 37]\n [\"clojurescript\" 33]\n [\"clojure\" 43]\n [\"babashka\" 85]\n [\"clojurescript\" 67]\n [\"clojure\" 40]\n [\"clojure\" 84]\n [\"clojure\" 26]\n [\"clojurescript\" 65]\n [\"clojure\" 58]\n [\"clojurescript\" 98]\n [\"babashka\" 87]\n [\"clojurescript\" 80]\n [\"babashka\" 11]\n [\"clojurescript\" 23]\n [\"clojurescript\" 12]\n [\"clojure\" 63]\n [\"clojure\" 14]\n [\"babashka\" 48]\n [\"babashka\" 55]\n [\"babashka\" 53]\n [\"clojure\" 76]]\n\nThese kinds have recursive kind semantics: if the values inside them have kind information, they should be handled accordingly.\nHere is a vector of things of different kinds inside:\n\n[(kind/hiccup\n  [:div {:style\n         {:background-color \"floralwhite\"}}\n   [:p \"hello\"]])\n (kind/md\n  \"hello *hello* **hello**\")\n (kind/code\n  \"(defn f [x] (+  x 9))\")]\n\n[hellohello hello hello(defn f [x] (+  x 9))]\nAnd here is a map:\n\n{:x  (kind/md\n      \"**hello**\")\n (kind/md\n  \"**hello**\") :x}\n\n{\n\n\n\n\n\n\n\n\n:x\n\n\n\nhello\n\n\n\n\n\n\n\n\n\n\n\n\n\nhello\n\n\n\n:x\n\n\n\n\n\n}\nHere is a more detailed example:\n\n{:vector-of-numbers [2 9 -1]\n :vector-of-different-things [\"hi\"\n                              (kind/hiccup\n                               [:big [:big \"hello\"]])]\n :map-of-different-things {:markdown (kind/md [\"*hi*, **hi**\"])\n                           :number 9999}\n :hiccup (kind/hiccup\n          [:big [:big \"bye\"]])\n :dataset (tc/dataset {:x (range 3)\n                       :y [:A :B :C]})}\n\n{:vector-of-numbers [2 9 -1]\n\n\n\n\n\n\n\n\n:vector-of-different-things\n\n\n\n[\n\n\n\"hi\"\n\nhello\n\n]\n\n\n\n\n\n\n\n\n\n\n\n\n\n:map-of-different-things\n\n\n\n{\n\n\n\n\n\n\n\n\n\n:markdown\n\n\n\nhi, hi\n\n\n\n\n\n\n:number 9999\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n:hiccup\n\n\nbye\n\n\n\n\n\n\n\n\n\n\n\n\n:dataset\n\n\n\n_unnamed [3 2]:\n\n\n\n:x\n:y\n\n\n\n\n0\n:A\n\n\n1\n:B\n\n\n2\n:C\n\n\n\n\n\n\n\n\n}",
>>>>>>> feb0693846b701aef12dd252e2d37396dc0dfa43
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Catalogue of visualization kinds</span>"
    ]
  },
  {
    "objectID": "kinds.html#hidden",
    "href": "kinds.html#hidden",
    "title": "3  Catalogue of visualization kinds",
    "section": "3.3 Hidden",
    "text": "3.3 Hidden\nValues of kind/hidden are simply not displayed.\n\n(kind/hidden\n {:x 9})",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Catalogue of visualization kinds</span>"
    ]
  },
  {
    "objectID": "kinds.html#markdown",
    "href": "kinds.html#markdown",
    "title": "3  Catalogue of visualization kinds",
    "section": "3.4 Markdown",
    "text": "3.4 Markdown\nValues of kind/md are rendered as Markdown.\n\n(kind/md\n [\"\n* This is [markdown](https://www.markdownguide.org/).\n  * *Isn't it??*\"\n  \"\n* Here is **some more** markdown.\"])\n\n\nThis is markdown.\n\nIsn’t it??\n\nHere is some more markdown.\n\nIdeally, tools should support TeX inside Markown.\n\n(kind/md\n \"If $x$ equals 9, then $$x^2+9=90$$\")\n\nIf \\(x\\) equals 9, then \\[x^2+9=90\\]",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Catalogue of visualization kinds</span>"
    ]
  },
  {
    "objectID": "kinds.html#tex",
    "href": "kinds.html#tex",
    "title": "3  Catalogue of visualization kinds",
    "section": "3.5 TeX",
    "text": "3.5 TeX\n\n(kind/tex \"x^2=\\\\alpha\")\n\n\\[x^2=\\alpha\\]",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Catalogue of visualization kinds</span>"
    ]
  },
  {
    "objectID": "kinds.html#code",
    "href": "kinds.html#code",
    "title": "3  Catalogue of visualization kinds",
    "section": "3.6 Code",
    "text": "3.6 Code\nValues of kind/code are rendered as Clojure code.\n\n(kind/code \"(update {:x 9} :x inc)\")\n\n\n(update {:x 9} :x inc)\n\n\n(kind/code\n [\"(update {:x 9} :x inc)\"\n  \"(update {:x 9} :x dec)\"])\n\n\n(update {:x 9} :x inc)\n\n\n(update {:x 9} :x dec)",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Catalogue of visualization kinds</span>"
    ]
  },
  {
    "objectID": "kinds.html#edn",
    "href": "kinds.html#edn",
    "title": "3  Catalogue of visualization kinds",
    "section": "3.7 Edn",
    "text": "3.7 Edn\n(will be documented soon)",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Catalogue of visualization kinds</span>"
    ]
  },
  {
    "objectID": "kinds.html#hiccup",
    "href": "kinds.html#hiccup",
    "title": "3  Catalogue of visualization kinds",
    "section": "3.8 Hiccup",
    "text": "3.8 Hiccup\nValues of kind/hiccup should be displayed as the HTML this value defines according to Hiccup notation.\n\n(def hello-hiccup\n  (kind/hiccup\n   [:ul\n    [:li [:p \"hi\"]]\n    [:li [:big\n          [:big\n           [:p {:style\n                ;; https://www.htmlcsscolor.com/hex/7F5F3F\n                {:color \"#7F5F3F\"}}\n            \"hello\"]]]]]))\n\n\nhello-hiccup\n\nhihello\nThis kind has recursive semantics: if the values inside them have kind information, they should be handled accordingly.\nFoe example:\n\n(kind/hiccup\n [:div {:style\n        {:background-color \"#eeddee\"\n         :border-style \"solid\"}}\n  [:p {:style {:background-color \"#ccddcc\"\n               :border-style \"solid\"}}\n   \"hello\"]\n  (kind/md\n   \"hello *hello* **hello**\")\n  (kind/code\n   \"(defn f [x] (+  x 9))\")])\n\nhellohello hello hello(defn f [x] (+  x 9))\nScittle and Reagent kinds are recognized automatically inside Hiccup:\n\nA list beginning with a symbol means kind/scittle.\nA vector with a list beginning with a symbol means kind/reagent.\n\n\n(kind/hiccup\n [:div\n  ;; recognized as `kind/scittle`\n  '(defn g [x]\n     (+ x 9))\n  ;; recognized as `kind/reagent`\n  ['(fn []\n      [:p (g 11)])]])\n\n\nA more detailed nesting example:\n\n(kind/hiccup\n [:div {:style {:background \"#f5f3ff\"\n                :border \"solid\"}}\n\n  [:hr]\n  [:pre [:code \"kind/md\"]]\n  (kind/md \"*some text* **some more text**\")\n\n  [:hr]\n  [:pre [:code \"kind/code\"]]\n  (kind/code \"{:x (1 2 [3 4])}\")\n\n  [:hr]\n  [:pre [:code \"kind/dataset\"]]\n  (tc/dataset {:x (range 13)\n               :y (map inc (range 13))})\n  [:hr]\n  [:pre [:code \"kind/table\"]]\n  (kind/table\n   (tc/dataset {:x (range 13)\n                :y (map inc (range 13))})\n   {:style {:height \"200px\"}})\n  [:hr]\n  [:pre [:code \"kind/vega-lite\"]]\n  (-&gt; {:data {:values \"x,y\n1,1\n2,4\n3,9\n-1,1\n-2,4\n-3,9\"\n              :format {:type :csv}},\n       :mark \"point\"\n       :encoding\n       {:x {:field \"x\", :type \"quantitative\"}\n        :y {:field \"y\", :type \"quantitative\"}}}\n      kind/vega-lite)\n\n  [:hr]\n  [:pre [:code \"kind/reagent\"]\n   [:p \"(automatically recognized without annotation)\"]]\n  ;; Recognized as `kind/reagent`:\n  ['(fn [numbers]\n      [:p {:style {:background \"#d4ebe9\"}}\n       (pr-str (map inc numbers))])\n   (vec (range 40))]])\n\nkind/mdsome text some more textkind/code{:x (1 2 [3 4])}kind/dataset_unnamed [13 2]:\n\n\n\n:x\n:y\n\n\n\n\n0\n1\n\n\n1\n2\n\n\n2\n3\n\n\n3\n4\n\n\n4\n5\n\n\n5\n6\n\n\n6\n7\n\n\n7\n8\n\n\n8\n9\n\n\n9\n10\n\n\n10\n11\n\n\n11\n12\n\n\n12\n13\n\n\n\nkind/table\n\n\n\n\nx\ny\n\n\n\n\n0\n1\n\n\n1\n2\n\n\n2\n3\n\n\n3\n4\n\n\n4\n5\n\n\n5\n6\n\n\n6\n7\n\n\n7\n8\n\n\n8\n9\n\n\n9\n10\n\n\n10\n11\n\n\n11\n12\n\n\n12\n13\n\n\n\n\nkind/vega-litekind/reagent(automatically recognized without annotation)",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Catalogue of visualization kinds</span>"
    ]
  },
  {
    "objectID": "kinds.html#reagent",
    "href": "kinds.html#reagent",
    "title": "3  Catalogue of visualization kinds",
    "section": "3.9 Reagent",
    "text": "3.9 Reagent\nValues of kind/reagent express Reagent components.\n\n(kind/reagent\n ['(fn [{:keys [initial-value\n                background-color]}]\n     (let [*click-count (reagent.core/atom initial-value)]\n       (fn []\n         [:div {:style {:background-color background-color}}\n          \"The atom \" [:code \"*click-count\"] \" has value: \"\n          @*click-count \". \"\n          [:input {:type \"button\" :value \"Click me!\"\n                   :on-click #(swap! *click-count inc)}]])))\n  {:initial-value 9\n   :background-color \"#d4ebe9\"}])\n\n\nThe :html/deps option can be used to provide additional dependencies:\n\n(kind/reagent\n ['(fn []\n     [:div {:style {:height \"200px\"}\n            :ref (fn [el]\n                   (let [m (-&gt; js/L\n                               (.map el)\n                               (.setView (clj-&gt;js [51.505 -0.09])\n                                         13))]\n                     (-&gt; js/L\n                         .-tileLayer\n                         (.provider \"OpenStreetMap.Mapnik\")\n                         (.addTo m))\n                     (-&gt; js/L\n                         (.marker (clj-&gt;js [51.5 -0.09]))\n                         (.addTo m)\n                         (.bindPopup \"A pretty CSS popup.&lt;br&gt; Easily customizable.\")\n                         (.openPopup))))}])]\n ;; Note we need to mention the dependency:\n {:html/deps [:leaflet]})\n\n\nPossible ways to specify deps should be documented better soon.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Catalogue of visualization kinds</span>"
    ]
  },
  {
    "objectID": "kinds.html#scittle",
    "href": "kinds.html#scittle",
    "title": "3  Catalogue of visualization kinds",
    "section": "3.10 Scittle",
    "text": "3.10 Scittle\nWith kind/scittle, one may specify Clojurescript code to run through Scittle.\n\n(kind/scittle\n '(.log js/console \"hello\"))\n\n\n\n(kind/scittle\n '(defn f [x]\n    (+ x 9)))\n\n\n\n(kind/reagent\n ['(fn []\n     [:p (f 11)])])",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Catalogue of visualization kinds</span>"
    ]
  },
  {
    "objectID": "kinds.html#html",
    "href": "kinds.html#html",
    "title": "3  Catalogue of visualization kinds",
    "section": "3.11 HTML",
    "text": "3.11 HTML\nValues of kind/html are displayed as raw html.\n\n(kind/html\n \"&lt;div style='height:40px; width:40px; background:purple'&gt;&lt;/div&gt; \")\n\n \n\n(kind/html\n \"\n&lt;svg height=100 width=100&gt;\n&lt;circle cx=50 cy=50 r=40 stroke='purple' stroke-width=3 fill='floralwhite' /&gt;\n&lt;/svg&gt; \")",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Catalogue of visualization kinds</span>"
    ]
  },
  {
    "objectID": "kinds.html#vega-lite",
    "href": "kinds.html#vega-lite",
    "title": "3  Catalogue of visualization kinds",
    "section": "3.12 Vega-Lite",
    "text": "3.12 Vega-Lite\n\n(def vega-lite-plot\n  (kind/vega-lite\n   {:encoding\n    {:y {:field \"y\", :type \"quantitative\"},\n     :size {:value 400},\n     :x {:field \"x\", :type \"quantitative\"}},\n    :mark {:type \"circle\", :tooltip true},\n    :width 400,\n    :background \"floralwhite\",\n    :height 100,\n    :data {:values \"x,y\\n1,1\\n2,-4\\n3,9\\n\", :format {:type \"csv\"}}}))\n\n\nvega-lite-plot",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Catalogue of visualization kinds</span>"
    ]
  },
  {
    "objectID": "kinds.html#vega",
    "href": "kinds.html#vega",
    "title": "3  Catalogue of visualization kinds",
    "section": "3.13 Vega",
    "text": "3.13 Vega\nInspired by Let’s Make A Bar Chart Tutorial of the Vega docs.\n\n(kind/vega\n {:$schema \"https://vega.github.io/schema/vega/v5.json\"\n  :width 400\n  :height 200\n  :padding 5\n  :data {:name \"table\"\n         :values [{:category :A :amount 28}\n                  {:category :B :amount 55}\n                  {:category :C :amount 43}\n                  {:category :D :amount 91}\n                  {:category :E :amount 81}\n                  {:category :F :amount 53}\n                  {:category :G :amount 19}\n                  {:category :H :amount 87}]}\n  :signals [{:name :tooltip\n             :value {}\n             :on [{:events \"rect:mouseover\"\n                   :update :datum}\n                  {:events \"rect:mouseout\"\n                   :update \"{}\"}]}]\n  :scales [{:name :xscale\n            :type :band\n            :domain {:data :table\n                     :field :category}\n            :range :width\n            :padding 0.05\n            :round true}\n           {:name :yscale\n            :domain {:data :table\n                     :field :amount}\n            :nice true\n            :range :height}]\n  :axes [{:orient :bottom :scale :xscale}\n         {:orient :left :scale :yscale}]\n  :marks {:type :rect\n          :from {:data :table}\n          :encode {:enter {:x {:scale :xscale\n                               :field :category}\n                           :width {:scale :xscale\n                                   :band 1}\n                           :y {:scale :yscale\n                               :field :amount}\n                           :y2 {:scale :yscale\n                                :value 0}}\n                   :update {:fill\n                            {:value :steelblue}}\n                   :hover {:fill\n                           {:value :red}}}}})",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Catalogue of visualization kinds</span>"
    ]
  },
  {
    "objectID": "kinds.html#cytoscape",
    "href": "kinds.html#cytoscape",
    "title": "3  Catalogue of visualization kinds",
    "section": "3.14 Cytoscape",
    "text": "3.14 Cytoscape\n\n(def cytoscape-example\n  {:elements {:nodes [{:data {:id \"a\" :parent \"b\"} :position {:x 215 :y 85}}\n                      {:data {:id \"b\"}}\n                      {:data {:id \"c\" :parent \"b\"} :position {:x 300 :y 85}}\n                      {:data {:id \"d\"} :position {:x 215 :y 175}}\n                      {:data {:id \"e\"}}\n                      {:data {:id \"f\" :parent \"e\"} :position {:x 300 :y 175}}]\n              :edges [{:data {:id \"ad\" :source \"a\" :target \"d\"}}\n                      {:data {:id \"eb\" :source \"e\" :target \"b\"}}]}\n   :style [{:selector \"node\"\n            :css {:content \"data(id)\"\n                  :text-valign \"center\"\n                  :text-halign \"center\"}}\n           {:selector \"parent\"\n            :css {:text-valign \"top\"\n                  :text-halign \"center\"}}\n           {:selector \"edge\"\n            :css {:curve-style \"bezier\"\n                  :target-arrow-shape \"triangle\"}}]\n   :layout {:name \"preset\"\n            :padding 5}})\n\n\n(kind/cytoscape\n cytoscape-example)\n\n\n\n(kind/cytoscape\n cytoscape-example\n {:style\n  {:width \"100px\"\n   :height \"100px\"\n   :background \"floralwhite\"}})",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Catalogue of visualization kinds</span>"
    ]
  },
  {
    "objectID": "kinds.html#echarts",
    "href": "kinds.html#echarts",
    "title": "3  Catalogue of visualization kinds",
    "section": "3.15 ECharts",
    "text": "3.15 ECharts\nThis example is taken from Apache ECharts’ Getting Started.\n\n(def echarts-example\n  {:title {:text \"Echarts Example\"}\n   :tooltip {}\n   :legend {:data [\"sales\"]}\n   :xAxis {:data [\"Shirts\", \"Cardigans\", \"Chiffons\",\n                  \"Pants\", \"Heels\", \"Socks\"]}\n   :yAxis {}\n   :series [{:name \"sales\"\n             :type \"bar\"\n             :data [5 20 36\n                    10 10 20]}]})\n\n\n(kind/echarts\n echarts-example)\n\n\n\n(-&gt; echarts-example\n    (kind/echarts {:style\n                   {:width \"500px\"\n                    :height \"200px\"\n                    :background \"floralwhite\"}}))",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Catalogue of visualization kinds</span>"
    ]
  },
  {
    "objectID": "kinds.html#plotly",
    "href": "kinds.html#plotly",
    "title": "3  Catalogue of visualization kinds",
    "section": "3.16 Plotly",
    "text": "3.16 Plotly\n\n(def plotly-example\n  (let [n 20\n        walk (fn [bias]\n               (-&gt;&gt; (repeatedly n #(-&gt; (rand)\n                                       (- 0.5)\n                                       (+ bias)))\n                    (reductions +)))]\n    {:data [{:x (walk 1)\n             :y (walk -1)\n             :z (map #(* % %)\n                     (walk 2))\n             :type :scatter3d\n             :mode :lines+markers\n             :opacity 0.2\n             :line {:width 10}\n             :marker {:size 20\n                      :colorscale :Viridis}}]}))\n\n\n(kind/plotly\n plotly-example)\n\n\n\n(-&gt; plotly-example\n    (kind/plotly {:style\n                  {:width \"300px\"\n                   :height \"300px\"}}))",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Catalogue of visualization kinds</span>"
    ]
  },
  {
    "objectID": "kinds.html#ggplotly",
    "href": "kinds.html#ggplotly",
    "title": "3  Catalogue of visualization kinds",
    "section": "3.17 ggplotly",
    "text": "3.17 ggplotly\nkind/htmlwidgets-ggplotly supports rendering plots through the JS client side of ggplotly - an R package offering a Plotly fronted for ggplot2’s grammar of graphics implementation. This package is part of the htmlwidgets ecosystem, and we represent that in the kind’s name.\nThe following is a work-in-progress attempt to generate JSON specs of the kind consumed by ggplotly’s client side.\nThe following spec function was generaged by mimicking R’s ggplotly(ggplot(mtcars, aes(wt, mpg)) + geom_point()). Therefore, some parts are hard-coded and require generalization. Other parts are missing (e.g., specifying colours).\n\n(defn -&gt;ggplotly-spec [{:keys [layers labels]}]\n  (kind/htmlwidgets-ggplotly\n   (let [;; assuming a single layer for now:\n         {:keys [data xmin xmax ymin ymax]} (first layers)\n         ;; an auxiliary function to compute tick values:\n         -&gt;tickvals (fn [l r]\n                      (let [jump (-&gt; (- r l)\n                                     (/ 6)\n                                     math/floor\n                                     int\n                                     (max 1))]\n                        (-&gt; l\n                            math/ceil\n                            (range r jump))))]\n     {:x\n      {:config\n       {:doubleClick \"reset\",\n        :modeBarButtonsToAdd [\"hoverclosest\" \"hovercompare\"],\n        :showSendToCloud false},\n       :layout\n       {:plot_bgcolor \"rgba(235,235,235,1)\",\n        :paper_bgcolor \"rgba(255,255,255,1)\",\n        :legend\n        {:bgcolor \"rgba(255,255,255,1)\",\n         :bordercolor \"transparent\",\n         :borderwidth 1.88976377952756,\n         :font {:color \"rgba(0,0,0,1)\", :family \"\", :size 11.689497716895}},\n        :xaxis (let [tickvals (-&gt;tickvals xmin xmax)\n                     ticktext (mapv str tickvals)\n                     range-len (- xmax xmin)\n                     range-expansion (* 0.1 range-len)\n                     expanded-range [(- xmin range-expansion)\n                                     (+ xmax range-expansion)]]\n                 {:linewidth 0,\n                  :nticks nil,\n                  :linecolor nil,\n                  :ticklen 3.65296803652968,\n                  :tickcolor \"rgba(51,51,51,1)\",\n                  :tickmode \"array\",\n                  :gridcolor \"rgba(255,255,255,1)\",\n                  :automargin true,\n                  :type \"linear\",\n                  :tickvals tickvals\n                  :zeroline false,\n                  :title\n                  {:text (:x labels),\n                   :font {:color \"rgba(0,0,0,1)\", :family \"\", :size 14.6118721461187}},\n                  :tickfont {:color \"rgba(77,77,77,1)\", :family \"\", :size 11.689497716895},\n                  :autorange false,\n                  :showticklabels true,\n                  :showline false,\n                  :showgrid true,\n                  :ticktext ticktext\n                  :ticks \"outside\",\n                  :gridwidth 0.66417600664176,\n                  :anchor \"y\",\n                  :domain [0 1],\n                  :hoverformat \".2f\",\n                  :tickangle 0,\n                  :tickwidth 0.66417600664176,\n                  :categoryarray ticktext,\n                  :categoryorder \"array\",\n                  :range expanded-range},)\n        :font {:color \"rgba(0,0,0,1)\", :family \"\", :size 14.6118721461187},\n        :showlegend false,\n        :barmode \"relative\",\n        :yaxis (let [tickvals (-&gt;tickvals ymin ymax)\n                     ticktext (mapv str tickvals)\n                     range-len (- ymax ymin)\n                     range-expansion (* 0.1 range-len)\n                     expanded-range [(- ymin range-expansion)\n                                     (+ ymax range-expansion)]]\n                 {:linewidth 0,\n                  :nticks nil,\n                  :linecolor nil,\n                  :ticklen 3.65296803652968,\n                  :tickcolor \"rgba(51,51,51,1)\",\n                  :tickmode \"array\",\n                  :gridcolor \"rgba(255,255,255,1)\",\n                  :automargin true,\n                  :type \"linear\",\n                  :tickvals tickvals,\n                  :zeroline false,\n                  :title\n                  {:text (:y labels),\n                   :font {:color \"rgba(0,0,0,1)\", :family \"\", :size 14.6118721461187}},\n                  :tickfont {:color \"rgba(77,77,77,1)\", :family \"\", :size 11.689497716895},\n                  :autorange false,\n                  :showticklabels true,\n                  :showline false,\n                  :showgrid true,\n                  :ticktext ticktext,\n                  :ticks \"outside\",\n                  :gridwidth 0.66417600664176,\n                  :anchor \"x\",\n                  :domain [0 1],\n                  :hoverformat \".2f\",\n                  :tickangle 0,\n                  :tickwidth 0.66417600664176,\n                  :categoryarray ticktext,\n                  :categoryorder \"array\",\n                  :range expanded-range},)\n        :hovermode \"closest\",\n        :margin\n        {:t 25.7412480974125,\n         :r 7.30593607305936,\n         :b 39.6955859969559,\n         :l 37.2602739726027},\n        :shapes\n        [{:yref \"paper\",\n          :fillcolor nil,\n          :xref \"paper\",\n          :y1 1,\n          :type \"rect\",\n          :line {:color nil, :width 0, :linetype []},\n          :y0 0,\n          :x1 1,\n          :x0 0}]},\n       :highlight\n       {:on \"plotly_click\",\n        :persistent false,\n        :dynamic false,\n        :selectize false,\n        :opacityDim 0.2,\n        :selected {:opacity 1},\n        :debounce 0},\n       :base_url \"https://plot.ly\",\n       :cur_data \"1f2fea5b54d146\",\n       :source \"A\",\n       :shinyEvents\n       [\"plotly_hover\"\n        \"plotly_click\"\n        \"plotly_selected\"\n        \"plotly_relayout\"\n        \"plotly_brushed\"\n        \"plotly_brushing\"\n        \"plotly_clickannotation\"\n        \"plotly_doubleclick\"\n        \"plotly_deselect\"\n        \"plotly_afterplot\"\n        \"plotly_sunburstclick\"],\n       :attrs {:1f2fea5b54d146 {:x {}, :y {}, :type \"scatter\"}},\n       :data\n       [{:y (:y data)\n         :hoveron \"points\",\n         :frame nil,\n         :hoverinfo \"text\",\n         :marker\n         {:autocolorscale false,\n          :color \"rgba(0,0,0,1)\",\n          :opacity 1,\n          :size 5.66929133858268,\n          :symbol \"circle\",\n          :line {:width 1.88976377952756, :color \"rgba(0,0,0,1)\"}},\n         :mode \"markers\"\n         :type \"scatter\",\n         :xaxis \"x\",\n         :showlegend false,\n         :yaxis \"y\",\n         :x (:x data)\n         :text (-&gt; data\n                   (tc/select-columns [:x :y])\n                   (tc/rows :as-maps)\n                   (-&gt;&gt; (mapv pr-str)))}]},\n      :evals [],\n      :jsHooks []})))\n\nA random walk example:\n\n(let [n 100\n      xs (range n)\n      ys (reductions + (repeatedly n #(- (rand) 0.5)))\n      xmin (tcc/reduce-min xs)\n      xmax (tcc/reduce-max xs)\n      ymin (tcc/reduce-min ys)\n      ymax (tcc/reduce-max ys)\n      data (tc/dataset {:x xs\n                        :y ys})]\n  (-&gt;ggplotly-spec\n   {:layers [{:data data\n              :xmin xmin :xmax xmax\n              :ymin ymin :ymax ymax}]\n    :labels {:x \"wt\"\n             :y \"mpg\"}}))",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Catalogue of visualization kinds</span>"
    ]
  },
  {
    "objectID": "kinds.html#highcharts",
    "href": "kinds.html#highcharts",
    "title": "3  Catalogue of visualization kinds",
    "section": "3.18 Highcharts",
    "text": "3.18 Highcharts\n\n(def highcharts-example\n  {:title {:text \"Line chart\"}\n   :subtitle {:text \"By Job Category\"}\n   :yAxis {:title {:text \"Number of Employees\"}}\n   :series [{:name \"Installation & Developers\"\n             :data [43934, 48656, 65165, 81827, 112143, 142383,\n                    171533, 165174, 155157, 161454, 154610]}\n\n            {:name \"Manufacturing\",\n             :data [24916, 37941, 29742, 29851, 32490, 30282,\n                    38121, 36885, 33726, 34243, 31050]}\n\n            {:name \"Sales & Distribution\",\n             :data [11744, 30000, 16005, 19771, 20185, 24377,\n                    32147, 30912, 29243, 29213, 25663]}\n\n            {:name \"Operations & Maintenance\",\n             :data [nil, nil, nil, nil, nil, nil, nil,\n                    nil, 11164, 11218, 10077]}\n\n            {:name \"Other\",\n             :data [21908, 5548, 8105, 11248, 8989, 11816, 18274,\n                    17300, 13053, 11906, 10073]}]\n\n   :xAxis {:accessibility {:rangeDescription \"Range: 2010 to 2020\"}}\n\n   :legend {:layout \"vertical\",\n            :align \"right\",\n            :verticalAlign \"middle\"}\n\n   :plotOptions {:series {:label {:connectorAllowed false},\n                          :pointStart 2010}}\n\n   :responsive {:rules [{:condition {:maxWidth 500},\n                         :chartOptions {:legend {:layout \"horizontal\",\n                                                 :align \"center\",\n                                                 :verticalAlign \"bottom\"}}}]}})\n\n\n(kind/highcharts\n highcharts-example)\n\n\n\n(kind/highcharts\n highcharts-example\n {:style {:height \"300px\"}})",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Catalogue of visualization kinds</span>"
    ]
  },
  {
    "objectID": "kinds.html#observable",
    "href": "kinds.html#observable",
    "title": "3  Catalogue of visualization kinds",
    "section": "3.19 Observable",
    "text": "3.19 Observable\nObservable visualizations can be written as Javascript. Some of us are working on a Clojure DSL to express the same.\nExamples from Quarto’s Observable documentation:\n\n(kind/observable\n \"athletes = FileAttachment('notebooks/datasets/athletes.csv').csv({typed: true})\")\n\n\nathletes = FileAttachment('notebooks/datasets/athletes.csv').csv({typed: true})\n\n\n\n\n\n\n\n(kind/observable\n \"athletes\")\n\n\nathletes\n\n\n\n\n\n\n\n(kind/observable\n \"Inputs.table(athletes)\")\n\n\nInputs.table(athletes)\n\n\n\n\n\n\n\n(kind/observable\n \"\nPlot.plot({\n  grid: true,\n  facet: {\n    data: athletes,\n    y: 'sex'\n  },\n  marks: [\n    Plot.rectY(\n      athletes,\n      Plot.binX({y: 'count'}, {x: 'weight', fill: 'sex'})\n    ),\n    Plot.ruleY([0])\n  ]\n})\n\")\n\n\nPlot.plot({\n  grid: true,\n  facet: {\n    data: athletes,\n    y: 'sex'\n  },\n  marks: [\n    Plot.rectY(\n      athletes,\n      Plot.binX({y: 'count'}, {x: 'weight', fill: 'sex'})\n    ),\n    Plot.ruleY([0])\n  ]\n})\n\n\n\n\n\n\n\n(kind/observable\n \"population = FileAttachment('notebooks/datasets/population.json').json()\")\n\n\npopulation = FileAttachment('notebooks/datasets/population.json').json()\n\n\n\n\n\n\n\n(kind/observable\n \"population\")\n\n\npopulation\n\n\n\n\n\n\n\n(kind/observable\n \" import { chart } with { population as data } from '@d3/zoomable-sunburst'\n chart\")\n\n\nimport { chart } with { population as data } from '@d3/zoomable-sunburst'\n chart\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(kind/observable\n \"\n//| panel: input\nviewof bill_length_min = Inputs.range(\n                                      [32, 50],\n                                      {value: 35, step: 1, label: 'Bill length (min):'}\n                                      )\nviewof islands = Inputs.checkbox(\n                                 ['Torgersen', 'Biscoe', 'Dream'],\n                                 { value: ['Torgersen', 'Biscoe'],\n                                  label: 'Islands:'\n                                  }\n                                 )\n\nPlot.rectY(filtered,\n            Plot.binX(\n                      {y: 'count'},\n                      {x: 'body_mass_g', fill: 'species', thresholds: 20}\n                      ))\n .plot({\n        facet: {\n                data: filtered,\n                x: 'sex',\n                y: 'species',\n                marginRight: 80\n                },\n        marks: [\n                Plot.frame(),\n                ]\n        }\n       )\nInputs.table(filtered)\ndata = FileAttachment('notebooks/datasets/palmer-penguins.csv').csv({ typed: true })\nfiltered = data.filter(function(penguin) {\n                                           return bill_length_min &lt; penguin.bill_length_mm &&\n                                           islands.includes(penguin.island);\n                                           })\n\")\n\n\nviewof bill_length_min = Inputs.range(\n                                      [32, 50],\n                                      {value: 35, step: 1, label: 'Bill length (min):'}\n                                      )\nviewof islands = Inputs.checkbox(\n                                 ['Torgersen', 'Biscoe', 'Dream'],\n                                 { value: ['Torgersen', 'Biscoe'],\n                                  label: 'Islands:'\n                                  }\n                                 )\n\nPlot.rectY(filtered,\n            Plot.binX(\n                      {y: 'count'},\n                      {x: 'body_mass_g', fill: 'species', thresholds: 20}\n                      ))\n .plot({\n        facet: {\n                data: filtered,\n                x: 'sex',\n                y: 'species',\n                marginRight: 80\n                },\n        marks: [\n                Plot.frame(),\n                ]\n        }\n       )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInputs.table(filtered)\n\n\n\n\n\n\n\ndata = FileAttachment('notebooks/datasets/palmer-penguins.csv').csv({ typed: true })\nfiltered = data.filter(function(penguin) {\n                                           return bill_length_min &lt; penguin.bill_length_mm &&\n                                           islands.includes(penguin.island);\n                                           })",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Catalogue of visualization kinds</span>"
    ]
  },
  {
    "objectID": "kinds.html#video",
    "href": "kinds.html#video",
    "title": "3  Catalogue of visualization kinds",
    "section": "3.20 Video",
    "text": "3.20 Video\nValues of kind/video are specifications for embedded videos.\nURLs that serve video files can be specified using the :src key:\n\n(kind/video {:src \"https://www.sample-videos.com/video321/mp4/240/big_buck_bunny_240p_30mb.mp4\"})\n\n\nYoutube videos can be spscified using the :youtube-id key: See HTML Youtube Videos on w3schools, for the relevant options.\n\n(kind/video\n {:youtube-id \"DAQnvAgBma8\"})\n\n\n\n(kind/video\n {:youtube-id \"DAQnvAgBma8\"\n  :allowfullscreen false})\n\n\n\n(kind/video\n {:youtube-id \"DAQnvAgBma8\"\n  :iframe-width 480\n  :iframe-height 270})\n\n\n\n(kind/video\n {:youtube-id \"DAQnvAgBma8\"\n  :embed-options {:mute 1\n                  :controls 0}})",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Catalogue of visualization kinds</span>"
    ]
  },
  {
    "objectID": "kinds.html#image",
    "href": "kinds.html#image",
    "title": "3  Catalogue of visualization kinds",
    "section": "3.21 Image",
    "text": "3.21 Image\nBy default (according to kindly/advice), BufferedImage objects are inferred to be of kind/image.\n\n(defonce tree-image\n  (-&gt;  \"https://upload.wikimedia.org/wikipedia/commons/e/eb/Ash_Tree_-_geograph.org.uk_-_590710.jpg\"\n       (java.net.URL.)\n       (javax.imageio.ImageIO/read)))\n\n\n(type tree-image)\n\n\njava.awt.image.BufferedImage\n\n\ntree-image\n\n\n\n\nURLS can be annotated as images as well.\n\n(kind/image\n {:src \"https://upload.wikimedia.org/wikipedia/commons/4/4e/Fifty-fifty_-_something_better_than_rolling_Easter_eggs_%28cropped%29.jpg\"})\n\n\n\n\nOther image representations are currently not supported.\n\n(kind/image\n \"AN IMAGE\")\n\n\nunsupported image format",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Catalogue of visualization kinds</span>"
    ]
  },
  {
    "objectID": "kinds.html#datasets",
    "href": "kinds.html#datasets",
    "title": "3  Catalogue of visualization kinds",
    "section": "3.22 Datasets",
    "text": "3.22 Datasets\nBy default (according to kindly/advice), tech.ml.dataset / Tablecloth datasets are inferred to be of kind/dataset.\nThis kind should be printed and rendered as Markdown, possibly with some tool-specific table styling.\n\n(def squares-dataset\n  (-&gt; {:x (range 25)}\n      tc/dataset\n      (tc/map-columns :y\n                      [:x]\n                      (fn [x]\n                        (* x x)))))\n\nDatasets can have various printable values inside:\n\n(tc/dataset\n {:x [1 [2 3] 4]\n  :y [:A :B :C]})\n\n\n_unnamed [3 2]:\n\n\n\n:x\n:y\n\n\n\n\n1\n:A\n\n\n[2 3]\n:B\n\n\n4\n:C\n\n\n\n\nSome elements might be missing:\n\n(tc/dataset\n [{:x 1 :y 2 :z 3}\n  {:y 4 :z 5}])\n\n\n_unnamed [2 3]:\n\n\n\n:x\n:y\n:z\n\n\n\n\n1\n2\n3\n\n\n\n4\n5\n\n\n\n\nSome kind options of kind/dataset control the way a dataset is printed.\n\n(-&gt; {:x (range 30)}\n    tc/dataset\n    (kind/dataset {:dataset/print-range 6}))\n\n\n_unnamed [30 1]:\n\n\n\n:x\n\n\n\n\n0\n\n\n1\n\n\n2\n\n\n…\n\n\n26\n\n\n27\n\n\n28\n\n\n29",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Catalogue of visualization kinds</span>"
    ]
  },
  {
    "objectID": "kinds.html#tables",
    "href": "kinds.html#tables",
    "title": "3  Catalogue of visualization kinds",
    "section": "3.23 Tables",
<<<<<<< HEAD
    "text": "3.23 Tables\nThe kind/table kind can be handy for an interactive table view. kind/table understands many structures which can be rendered as a table.\nA map containing either :row-vectors (sequence of sequences) or row-maps (sequence of maps) keys with optional :column-names.\n\n(kind/table\n {:column-names [:preferred-language :age]\n  :row-vectors people-as-vectors})\n\n\n\n\n\n\npreferred-language\nage\n\n\n\n\nclojure\n89\n\n\nclojure\n6\n\n\nclojure\n90\n\n\nbabashka\n63\n\n\nbabashka\n20\n\n\nbabashka\n30\n\n\nclojure\n89\n\n\nclojure\n79\n\n\nclojure\n82\n\n\nbabashka\n81\n\n\nclojure\n56\n\n\nclojurescript\n10\n\n\nclojure\n85\n\n\nclojure\n55\n\n\nclojure\n4\n\n\nclojure\n75\n\n\nclojurescript\n99\n\n\nclojurescript\n72\n\n\nclojurescript\n63\n\n\nclojurescript\n92\n\n\nbabashka\n10\n\n\nclojurescript\n3\n\n\nclojurescript\n17\n\n\nclojure\n68\n\n\nclojure\n86\n\n\nbabashka\n46\n\n\nclojurescript\n34\n\n\nclojurescript\n36\n\n\nclojurescript\n95\n\n\n\n\n\nLack of column names produces table without a header.\n\n(kind/table\n {:row-vectors (take 5 people-as-vectors)})\n\n\n\n\n\n\nclojure\n89\n\n\nclojure\n6\n\n\nclojure\n90\n\n\nbabashka\n63\n\n\nbabashka\n20\n\n\n\n\n\nColumn names are inferred from a sequence of maps\n\n(kind/table\n {:row-maps (take 5 people-as-maps)})\n\n\n\n\n\n\npreferred-language\nage\n\n\n\n\nclojure\n89\n\n\nclojure\n6\n\n\nclojure\n90\n\n\nbabashka\n63\n\n\nbabashka\n20\n\n\n\n\n\nWe can limit displayed columns for sequence of maps case.\n\n(kind/table\n {:column-names [:preferred-language]\n  :row-maps (take 5 people-as-maps)})\n\n\n\n\n\n\npreferred-language\n\n\n\n\nclojure\n\n\nclojure\n\n\nclojure\n\n\nbabashka\n\n\nbabashka\n\n\n\n\n\nSequence of sequences and sequence of maps also work\n\n(kind/table (take 5 people-as-vectors))\n\n\n\n\n\n\nclojure\n89\n\n\nclojure\n6\n\n\nclojure\n90\n\n\nbabashka\n63\n\n\nbabashka\n20\n\n\n\n\n\n\n(kind/table (take 5 people-as-maps))\n\n\n\n\n\n\npreferred-language\nage\n\n\n\n\nclojure\n89\n\n\nclojure\n6\n\n\nclojure\n90\n\n\nbabashka\n63\n\n\nbabashka\n20\n\n\n\n\n\nAdditionally map of sequences is supported (unless it contains :row-vectors or :row-maps key, see such case above).\n\n(kind/table {:x (range 6)\n             :y [:A :B :C :A :B :C]})\n\n\n\n\n\n\nx\ny\n\n\n\n\n0\nA\n\n\n1\nB\n\n\n2\nC\n\n\n3\nA\n\n\n4\nB\n\n\n5\nC\n\n\n\n\n\nA dataset can be also treated as a table input.\n\n(def people-as-dataset\n  (tc/dataset people-as-maps))\n\n\n(-&gt; people-as-dataset\n    kind/table)\n\n\n\n\n\n\npreferred-language\nage\n\n\n\n\nclojure\n89\n\n\nclojure\n6\n\n\nclojure\n90\n\n\nbabashka\n63\n\n\nbabashka\n20\n\n\nbabashka\n30\n\n\nclojure\n89\n\n\nclojure\n79\n\n\nclojure\n82\n\n\nbabashka\n81\n\n\nclojure\n56\n\n\nclojurescript\n10\n\n\nclojure\n85\n\n\nclojure\n55\n\n\nclojure\n4\n\n\nclojure\n75\n\n\nclojurescript\n99\n\n\nclojurescript\n72\n\n\nclojurescript\n63\n\n\nclojurescript\n92\n\n\nbabashka\n10\n\n\nclojurescript\n3\n\n\nclojurescript\n17\n\n\nclojure\n68\n\n\nclojure\n86\n\n\nbabashka\n46\n\n\nclojurescript\n34\n\n\nclojurescript\n36\n\n\nclojurescript\n95\n\n\n\n\n\nAdditional options may hint at way the table should be rendered.\n\n(-&gt; people-as-dataset\n    (kind/table {:element/max-height \"300px\"}))\n\n\n\n\n\n\n\npreferred-language\nage\n\n\n\n\nclojure\n89\n\n\nclojure\n6\n\n\nclojure\n90\n\n\nbabashka\n63\n\n\nbabashka\n20\n\n\nbabashka\n30\n\n\nclojure\n89\n\n\nclojure\n79\n\n\nclojure\n82\n\n\nbabashka\n81\n\n\nclojure\n56\n\n\nclojurescript\n10\n\n\nclojure\n85\n\n\nclojure\n55\n\n\nclojure\n4\n\n\nclojure\n75\n\n\nclojurescript\n99\n\n\nclojurescript\n72\n\n\nclojurescript\n63\n\n\nclojurescript\n92\n\n\nbabashka\n10\n\n\nclojurescript\n3\n\n\nclojurescript\n17\n\n\nclojure\n68\n\n\nclojure\n86\n\n\nbabashka\n46\n\n\nclojurescript\n34\n\n\nclojurescript\n36\n\n\nclojurescript\n95\n\n\n\n\n\n\nSome tools support datatables for displaying tables. This can be expressed using the :use-datatables option.\n\n(-&gt; people-as-maps\n    tc/dataset\n    (kind/table {:use-datatables true}))\n\n\n\npreferred-languageageclojure89clojure6clojure90babashka63babashka20babashka30clojure89clojure79clojure82babashka81clojure56clojurescript10clojure85clojure55clojure4clojure75clojurescript99clojurescript72clojurescript63clojurescript92babashka10clojurescript3clojurescript17clojure68clojure86babashka46clojurescript34clojurescript36clojurescript95\n\n\nIn addition, the :datatables option can be used to control datatables options (see the full list).\n\n(-&gt; people-as-dataset\n    (kind/table {:use-datatables true\n                 :datatables {:scrollY 200}}))\n\n\n\npreferred-languageageclojure89clojure6clojure90babashka63babashka20babashka30clojure89clojure79clojure82babashka81clojure56clojurescript10clojure85clojure55clojure4clojure75clojurescript99clojurescript72clojurescript63clojurescript92babashka10clojurescript3clojurescript17clojure68clojure86babashka46clojurescript34clojurescript36clojurescript95\n\n\nThe kind/table has recursive semantics: if the values inside them have kind information, they should be handled accordingly.\n\n(kind/table\n {:column-names [(kind/code \":x\")\n                 (kind/code \":y\")]\n  :row-vectors [[(kind/md \"*some text* **some more text**\")\n                 (kind/code \"{:x (1 2 [3 4])}\")]\n                [(tc/dataset {:x (range 3)\n                              :y (map inc (range 3))})\n                 vega-lite-plot]\n                [(kind/hiccup [:div {:style {:height 200}}\n                               tree-image])\n                 (kind/md \"$x^2$\")]]})\n\n\n\n\n\n\n\n\n\n\n\n:x\n\n\n:y\n\n\n\n\n\nsome text some more text\n\n{:x (1 2 [3 4])}\n\n\n\n_unnamed [3 2]:\n:x:y\n01\n12\n23\n\n\n\n\n\n\n\n\n\\(x^2\\)",
=======
    "text": "3.23 Tables\nThe kind/table kind can be handy for an interactive table view. kind/table understands many structures which can be rendered as a table.\nA map containing either :row-vectors (sequence of sequences) or row-maps (sequence of maps) keys with optional :column-names.\n\n(kind/table\n {:column-names [:preferred-language :age]\n  :row-vectors people-as-vectors})\n\n\n\n\n\n\npreferred-language\nage\n\n\n\n\nclojurescript\n60\n\n\nbabashka\n6\n\n\nclojure\n62\n\n\nclojurescript\n10\n\n\nclojurescript\n28\n\n\nclojure\n62\n\n\nbabashka\n69\n\n\nclojure\n37\n\n\nclojurescript\n33\n\n\nclojure\n43\n\n\nbabashka\n85\n\n\nclojurescript\n67\n\n\nclojure\n40\n\n\nclojure\n84\n\n\nclojure\n26\n\n\nclojurescript\n65\n\n\nclojure\n58\n\n\nclojurescript\n98\n\n\nbabashka\n87\n\n\nclojurescript\n80\n\n\nbabashka\n11\n\n\nclojurescript\n23\n\n\nclojurescript\n12\n\n\nclojure\n63\n\n\nclojure\n14\n\n\nbabashka\n48\n\n\nbabashka\n55\n\n\nbabashka\n53\n\n\nclojure\n76\n\n\n\n\n\nLack of column names produces table without a header.\n\n(kind/table\n {:row-vectors (take 5 people-as-vectors)})\n\n\n\n\n\n\nclojurescript\n60\n\n\nbabashka\n6\n\n\nclojure\n62\n\n\nclojurescript\n10\n\n\nclojurescript\n28\n\n\n\n\n\nColumn names are inferred from a sequence of maps\n\n(kind/table\n {:row-maps (take 5 people-as-maps)})\n\n\n\n\n\n\npreferred-language\nage\n\n\n\n\nclojurescript\n60\n\n\nbabashka\n6\n\n\nclojure\n62\n\n\nclojurescript\n10\n\n\nclojurescript\n28\n\n\n\n\n\nWe can limit displayed columns for sequence of maps case.\n\n(kind/table\n {:column-names [:preferred-language]\n  :row-maps (take 5 people-as-maps)})\n\n\n\n\n\n\npreferred-language\n\n\n\n\nclojurescript\n\n\nbabashka\n\n\nclojure\n\n\nclojurescript\n\n\nclojurescript\n\n\n\n\n\nSequence of sequences and sequence of maps also work\n\n(kind/table (take 5 people-as-vectors))\n\n\n\n\n\n\nclojurescript\n60\n\n\nbabashka\n6\n\n\nclojure\n62\n\n\nclojurescript\n10\n\n\nclojurescript\n28\n\n\n\n\n\n\n(kind/table (take 5 people-as-maps))\n\n\n\n\n\n\npreferred-language\nage\n\n\n\n\nclojurescript\n60\n\n\nbabashka\n6\n\n\nclojure\n62\n\n\nclojurescript\n10\n\n\nclojurescript\n28\n\n\n\n\n\nAdditionally map of sequences is supported (unless it contains :row-vectors or :row-maps key, see such case above).\n\n(kind/table {:x (range 6)\n             :y [:A :B :C :A :B :C]})\n\n\n\n\n\n\nx\ny\n\n\n\n\n0\nA\n\n\n1\nB\n\n\n2\nC\n\n\n3\nA\n\n\n4\nB\n\n\n5\nC\n\n\n\n\n\nA dataset can be also treated as a table input.\n\n(def people-as-dataset\n  (tc/dataset people-as-maps))\n\n\n(-&gt; people-as-dataset\n    kind/table)\n\n\n\n\n\n\npreferred-language\nage\n\n\n\n\nclojurescript\n60\n\n\nbabashka\n6\n\n\nclojure\n62\n\n\nclojurescript\n10\n\n\nclojurescript\n28\n\n\nclojure\n62\n\n\nbabashka\n69\n\n\nclojure\n37\n\n\nclojurescript\n33\n\n\nclojure\n43\n\n\nbabashka\n85\n\n\nclojurescript\n67\n\n\nclojure\n40\n\n\nclojure\n84\n\n\nclojure\n26\n\n\nclojurescript\n65\n\n\nclojure\n58\n\n\nclojurescript\n98\n\n\nbabashka\n87\n\n\nclojurescript\n80\n\n\nbabashka\n11\n\n\nclojurescript\n23\n\n\nclojurescript\n12\n\n\nclojure\n63\n\n\nclojure\n14\n\n\nbabashka\n48\n\n\nbabashka\n55\n\n\nbabashka\n53\n\n\nclojure\n76\n\n\n\n\n\nAdditional options may hint at way the table should be rendered.\n\n(-&gt; people-as-dataset\n    (kind/table {:element/max-height \"300px\"}))\n\n\n\n\n\n\n\npreferred-language\nage\n\n\n\n\nclojurescript\n60\n\n\nbabashka\n6\n\n\nclojure\n62\n\n\nclojurescript\n10\n\n\nclojurescript\n28\n\n\nclojure\n62\n\n\nbabashka\n69\n\n\nclojure\n37\n\n\nclojurescript\n33\n\n\nclojure\n43\n\n\nbabashka\n85\n\n\nclojurescript\n67\n\n\nclojure\n40\n\n\nclojure\n84\n\n\nclojure\n26\n\n\nclojurescript\n65\n\n\nclojure\n58\n\n\nclojurescript\n98\n\n\nbabashka\n87\n\n\nclojurescript\n80\n\n\nbabashka\n11\n\n\nclojurescript\n23\n\n\nclojurescript\n12\n\n\nclojure\n63\n\n\nclojure\n14\n\n\nbabashka\n48\n\n\nbabashka\n55\n\n\nbabashka\n53\n\n\nclojure\n76\n\n\n\n\n\n\nSome tools support datatables for displaying tables. This can be expressed using the :use-datatables option.\n\n(-&gt; people-as-maps\n    tc/dataset\n    (kind/table {:use-datatables true}))\n\n\n\npreferred-languageageclojurescript60babashka6clojure62clojurescript10clojurescript28clojure62babashka69clojure37clojurescript33clojure43babashka85clojurescript67clojure40clojure84clojure26clojurescript65clojure58clojurescript98babashka87clojurescript80babashka11clojurescript23clojurescript12clojure63clojure14babashka48babashka55babashka53clojure76\n\n\nIn addition, the :datatables option can be used to control datatables options (see the full list).\n\n(-&gt; people-as-dataset\n    (kind/table {:use-datatables true\n                 :datatables {:scrollY 200}}))\n\n\n\npreferred-languageageclojurescript60babashka6clojure62clojurescript10clojurescript28clojure62babashka69clojure37clojurescript33clojure43babashka85clojurescript67clojure40clojure84clojure26clojurescript65clojure58clojurescript98babashka87clojurescript80babashka11clojurescript23clojurescript12clojure63clojure14babashka48babashka55babashka53clojure76\n\n\nThe kind/table has recursive semantics: if the values inside them have kind information, they should be handled accordingly.\n\n(kind/table\n {:column-names [(kind/code \":x\")\n                 (kind/code \":y\")]\n  :row-vectors [[(kind/md \"*some text* **some more text**\")\n                 (kind/code \"{:x (1 2 [3 4])}\")]\n                [(tc/dataset {:x (range 3)\n                              :y (map inc (range 3))})\n                 vega-lite-plot]\n                [(kind/hiccup [:div {:style {:height 200}}\n                               tree-image])\n                 (kind/md \"$x^2$\")]]})\n\n\n\n\n\n\n\n\n\n\n\n:x\n\n\n:y\n\n\n\n\n\nsome text some more text\n\n{:x (1 2 [3 4])}\n\n\n\n_unnamed [3 2]:\n:x:y\n01\n12\n23\n\n\n\n\n\n\n\n\n\\(x^2\\)",
>>>>>>> feb0693846b701aef12dd252e2d37396dc0dfa43
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Catalogue of visualization kinds</span>"
    ]
  },
  {
    "objectID": "kinds.html#pretty-printing",
    "href": "kinds.html#pretty-printing",
    "title": "3  Catalogue of visualization kinds",
    "section": "3.24 Pretty printing",
    "text": "3.24 Pretty printing\nValues of kind kind/pprint should be pretty-printed.\n\n(-&gt;&gt; (range 30)\n     (apply array-map)\n     kind/pprint)\n\n\n{0 1,\n 2 3,\n 4 5,\n 6 7,\n 8 9,\n 10 11,\n 12 13,\n 14 15,\n 16 17,\n 18 19,\n 20 21,\n 22 23,\n 24 25,\n 26 27,\n 28 29}\n\nFor some tool like Clay, this is the default when there is no kind information.\n\n(-&gt;&gt; (range 30)\n     (apply array-map))\n\n\n{0 1,\n 2 3,\n 4 5,\n 6 7,\n 8 9,\n 10 11,\n 12 13,\n 14 15,\n 16 17,\n 18 19,\n 20 21,\n 22 23,\n 24 25,\n 26 27,\n 28 29}\n\nStill, it can be is useful to ensure the same behaviour across different tools.\nIt can also be useful to override other kinds previously specified or automatically inferred.\n\n(kind/pprint\n hello-hiccup)\n\n\n[:ul\n [:li [:p \"hi\"]]\n [:li [:big [:big [:p {:style {:color \"#7F5F3F\"}} \"hello\"]]]]]\n\n\n(kind/pprint\n tree-image)\n\n\n[#object[java.awt.image.BufferedImage 0x293a2e6c \"BufferedImage@293a2e6c: type = 5 ColorModel: #pixelBits = 24 numComponents = 3 color space = java.awt.color.ICC_ColorSpace@5d8a9b74 transparency = 1 has alpha = false isAlphaPre = false ByteInterleavedRaster: width = 480 height = 640 #numDataElements 3 dataOff[0] = 2\"]]\n\n\n(kind/pprint\n (tc/dataset {:x (range 3)\n              :y [:A :B :C]}))\n\n\n_unnamed [3 2]:\n\n| :x | :y |\n|---:|----|\n|  0 | :A |\n|  1 | :B |\n|  2 | :C |",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Catalogue of visualization kinds</span>"
    ]
  },
  {
    "objectID": "kinds.html#emmy-viewers",
    "href": "kinds.html#emmy-viewers",
    "title": "3  Catalogue of visualization kinds",
    "section": "3.25 emmy-viewers",
    "text": "3.25 emmy-viewers\nThe support for Emmy-viewers is documented at the 📖 Emmy-viewers chapter📖 of this book.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Catalogue of visualization kinds</span>"
    ]
  },
  {
    "objectID": "kinds.html#portal",
    "href": "kinds.html#portal",
    "title": "3  Catalogue of visualization kinds",
    "section": "3.26 Portal",
    "text": "3.26 Portal\nValues of kind/portal are displayed using an embedded Portal viewer.\n\n(kind/portal\n {:x (range 3)})\n\n\nThis kind has recursive semantics: if the values inside them have kind information, they should be handled accordingly.\nNote that kind/portal applies the kind-portal adapter to nested kinds.\n\n(kind/portal\n [(kind/hiccup [:img {:height 50 :width 50\n                      :src \"https://clojure.org/images/clojure-logo-120b.png\"}])\n  (kind/hiccup [:img {:height 50 :width 50\n                      :src \"https://raw.githubusercontent.com/djblue/portal/fbc54632adc06c6e94a3d059c858419f0063d1cf/resources/splash.svg\"}])])\n\n\n\n(kind/portal\n [(kind/hiccup [:big [:big \"a plot\"]])\n  vega-lite-plot])\n\n\n\n(kind/portal\n [(kind/hiccup [:p {:style {:background-color \"#ccddcc\"\n                            :border-style \"solid\"}}\n                \"hello\"])\n  (kind/md\n   \"hello *hello* **hello**\")\n  (kind/code\n   \"(defn f [x] (+  x 9))\")\n  vega-lite-plot])",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Catalogue of visualization kinds</span>"
    ]
  },
  {
    "objectID": "kinds.html#fragment",
    "href": "kinds.html#fragment",
    "title": "3  Catalogue of visualization kinds",
    "section": "3.27 Fragment",
    "text": "3.27 Fragment\nkind/fragment is a special kind. It expects a sequential value and generates multiple items, of potentially multiple kinds, from its elements.\n\n(-&gt;&gt; [\"purple\" \"darkgreen\" \"goldenrod\"]\n     (mapcat (fn [color]\n               [(kind/md (str \"### subsection: \" color))\n                (kind/hiccup [:div {:style {:background-color color\n                                            :color \"lightgrey\"}}\n                              [:big [:p color]]])]))\n     kind/fragment)\n\n\n3.27.1 subsection: purple\npurple\n\n\n3.27.2 subsection: darkgreen\ndarkgreen\n\n\n3.27.3 subsection: goldenrod\ngoldenrod",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Catalogue of visualization kinds</span>"
    ]
  },
  {
    "objectID": "kinds.html#function",
    "href": "kinds.html#function",
    "title": "3  Catalogue of visualization kinds",
    "section": "3.28 Function",
<<<<<<< HEAD
    "text": "3.28 Function\nkind/fn is a special kind. It is displayed by first evaluating a given function and arguments, then proceeding recursively with the resulting value.\nThe function can be specified through the Kindly options.\n\n(kind/fn {:x 1\n          :y 2}\n  {:kindly/f (fn [{:keys [x y]}]\n               (+ x y))})\n\n\n3\n\n\n(kind/fn {:my-video-src \"https://file-examples.com/storage/fe58a1f07d66f447a9512f1/2017/04/file_example_MP4_480_1_5MG.mp4\"}\n  {:kindly/f (fn [{:keys [my-video-src]}]\n               (kind/video\n                {:src my-video-src}))})\n\n\nIf the value is a vector, the function is the first element, and the arguments are the rest.\n\n(kind/fn\n  [+ 1 2])\n\n\n3\n\nIf the value is a map, the function is held at the key :kindly/f, and the argument is the map.\n\n(kind/fn\n  {:kindly/f (fn [{:keys [x y]}]\n               (+ x y))\n   :x 1\n   :y 2})\n\n\n3\n\nThe kind of the value returned by the function is respected. For example, here are examples with a function returning kind/dataset.\n\n(kind/fn\n  {:x (range 3)\n   :y (repeatedly 3 rand)}\n  {:kindly/f tc/dataset})\n\n\n_unnamed [3 2]:\n\n\n\n:x\n:y\n\n\n\n\n0\n0.32488356\n\n\n1\n0.62791330\n\n\n2\n0.83072466\n\n\n\n\n\n(kind/fn\n  [tc/dataset\n   {:x (range 3)\n    :y (repeatedly 3 rand)}])\n\n\n_unnamed [3 2]:\n\n\n\n:x\n:y\n\n\n\n\n0\n0.55845687\n\n\n1\n0.78940389\n\n\n2\n0.54411579\n\n\n\n\n\n(kind/fn\n  {:kindly/f tc/dataset\n   :x (range 3)\n   :y (repeatedly 3 rand)})\n\n\n_unnamed [3 2]:\n\n\n\n:x\n:y\n\n\n\n\n0\n0.41706324\n\n\n1\n0.59904783\n\n\n2\n0.79374344\n\n\n\n\nkind/fn is a special kind. It is displayed by first evaluating a given function and arguments, then proceeding recursively with the resulting value.\nIf the value is a vector, the function is the first element, and the arguments are the rest.\n\n(kind/fn\n  [+ 1 2])\n\n\n3\n\nIf the value is a map, the function is held at the key :kindly/f, and the argument is the map.\n\n(kind/fn\n  {:kindly/f (fn [{:keys [x y]}]\n               (+ x y))\n   :x 1\n   :y 2})\n\n\n3\n\nThe kind of the value returned by the function is respected. For example, here are examples with a function returning kind/dataset.\n\n(kind/fn\n  [tc/dataset\n   {:x (range 3)\n    :y (repeatedly 3 rand)}])\n\n\n_unnamed [3 2]:\n\n\n\n:x\n:y\n\n\n\n\n0\n0.63901942\n\n\n1\n0.95194063\n\n\n2\n0.67870908\n\n\n\n\n\n(kind/fn\n  {:kindly/f tc/dataset\n   :x (range 3)\n   :y (repeatedly 3 rand)})\n\n\n_unnamed [3 2]:\n\n\n\n:x\n:y\n\n\n\n\n0\n0.99304186\n\n\n1\n0.91906407\n\n\n2\n0.53920288",
=======
    "text": "3.28 Function\nkind/fn is a special kind. It is displayed by first evaluating a given function and arguments, then proceeding recursively with the resulting value.\nThe function can be specified through the Kindly options.\n\n(kind/fn {:x 1\n          :y 2}\n  {:kindly/f (fn [{:keys [x y]}]\n               (+ x y))})\n\n\n3\n\n\n(kind/fn {:my-video-src \"https://file-examples.com/storage/fe58a1f07d66f447a9512f1/2017/04/file_example_MP4_480_1_5MG.mp4\"}\n  {:kindly/f (fn [{:keys [my-video-src]}]\n               (kind/video\n                {:src my-video-src}))})\n\n\nIf the value is a vector, the function is the first element, and the arguments are the rest.\n\n(kind/fn\n  [+ 1 2])\n\n\n3\n\nIf the value is a map, the function is held at the key :kindly/f, and the argument is the map.\n\n(kind/fn\n  {:kindly/f (fn [{:keys [x y]}]\n               (+ x y))\n   :x 1\n   :y 2})\n\n\n3\n\nThe kind of the value returned by the function is respected. For example, here are examples with a function returning kind/dataset.\n\n(kind/fn\n  {:x (range 3)\n   :y (repeatedly 3 rand)}\n  {:kindly/f tc/dataset})\n\n\n_unnamed [3 2]:\n\n\n\n:x\n:y\n\n\n\n\n0\n0.79323628\n\n\n1\n0.95010921\n\n\n2\n0.60248890\n\n\n\n\n\n(kind/fn\n  [tc/dataset\n   {:x (range 3)\n    :y (repeatedly 3 rand)}])\n\n\n_unnamed [3 2]:\n\n\n\n:x\n:y\n\n\n\n\n0\n0.08843299\n\n\n1\n0.28661458\n\n\n2\n0.93815791\n\n\n\n\n\n(kind/fn\n  {:kindly/f tc/dataset\n   :x (range 3)\n   :y (repeatedly 3 rand)})\n\n\n_unnamed [3 2]:\n\n\n\n:x\n:y\n\n\n\n\n0\n0.24545322\n\n\n1\n0.00877005\n\n\n2\n0.50470837\n\n\n\n\nkind/fn is a special kind. It is displayed by first evaluating a given function and arguments, then proceeding recursively with the resulting value.\nIf the value is a vector, the function is the first element, and the arguments are the rest.\n\n(kind/fn\n  [+ 1 2])\n\n\n3\n\nIf the value is a map, the function is held at the key :kindly/f, and the argument is the map.\n\n(kind/fn\n  {:kindly/f (fn [{:keys [x y]}]\n               (+ x y))\n   :x 1\n   :y 2})\n\n\n3\n\nThe kind of the value returned by the function is respected. For example, here are examples with a function returning kind/dataset.\n\n(kind/fn\n  [tc/dataset\n   {:x (range 3)\n    :y (repeatedly 3 rand)}])\n\n\n_unnamed [3 2]:\n\n\n\n:x\n:y\n\n\n\n\n0\n0.58662124\n\n\n1\n0.62228897\n\n\n2\n0.14110843\n\n\n\n\n\n(kind/fn\n  {:kindly/f tc/dataset\n   :x (range 3)\n   :y (repeatedly 3 rand)})\n\n\n_unnamed [3 2]:\n\n\n\n:x\n:y\n\n\n\n\n0\n0.77142416\n\n\n1\n0.42551298\n\n\n2\n0.43664805",
>>>>>>> feb0693846b701aef12dd252e2d37396dc0dfa43
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Catalogue of visualization kinds</span>"
    ]
  },
  {
    "objectID": "kinds.html#test-last",
    "href": "kinds.html#test-last",
    "title": "3  Catalogue of visualization kinds",
    "section": "3.29 test-last",
    "text": "3.29 test-last\nkind/test-last allows to define a test over the previous form. This is still work-in-progress, and will be documented soon.\nFor now, pleaes see the documentation at the Clay tool.\nIf you are interested in this option, please reach out. We can test it with your project needs, and it will help stabilizing a useful API.\n\nsource: notebooks/kinds.clj",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Catalogue of visualization kinds</span>"
    ]
  },
  {
    "objectID": "kind_compatibility.html",
    "href": "kind_compatibility.html",
    "title": "4  Kind compatibility matrix",
    "section": "",
    "text": "4.1 Notes\nThe following table maps the landscape of tools supporing the Kindly standard.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Kind compatibility matrix</span>"
    ]
  },
  {
    "objectID": "kind_compatibility.html#notes",
    "href": "kind_compatibility.html#notes",
    "title": "4  Kind compatibility matrix",
    "section": "",
    "text": "Currently, the table does not provide any details regarding the nesting of kinds: whether it is possible to contain a kind/image inside kind/hiccup, etc. This will require a more detailed exploration.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Kind compatibility matrix</span>"
    ]
  },
  {
    "objectID": "kind_compatibility.html#legend",
    "href": "kind_compatibility.html#legend",
    "title": "4  Kind compatibility matrix",
    "section": "4.2 Legend",
    "text": "4.2 Legend\n\n{:c :compatible,\n :u :unknown,\n :n :not-implemented,\n :e :exception,\n :r :rendering-differs-to-clay}",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Kind compatibility matrix</span>"
    ]
  },
  {
    "objectID": "kind_compatibility.html#tools-to-be-added",
    "href": "kind_compatibility.html#tools-to-be-added",
    "title": "4  Kind compatibility matrix",
    "section": "4.3 Tools to be added",
    "text": "4.3 Tools to be added\n\nKindly-render (generic tool-agnostic infrastructure)\nPortal\nCursive\nCalva",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Kind compatibility matrix</span>"
    ]
  },
  {
    "objectID": "kind_compatibility.html#details",
    "href": "kind_compatibility.html#details",
    "title": "4  Kind compatibility matrix",
    "section": "4.4 Details",
    "text": "4.4 Details\n\n\n\n\n\n\n\n\n\n\n\n\nkind\ndescription\nclay\nclojupyter\nclerk\n\n\n\n\n:kind/code\ncode\n\nC\n\n\nR\n\n\nN\n\n\n\n:kind/cytoscape\ncytoscape\n\nC\n\n\nC\n\n\nC\n\n\n\n:kind/dataset\ndataset\n\nC\n\n\nC\n\n\nC\n\n\n\n:kind/echarts\necharts\n\nC\n\n\nC\n\n\nC\n\n\n\n:kind/edn\nedn\n\nN\n\n\nN\n\n\nN\n\n\n\n:kind/emmy-viewers\nemmy-viewers\n\nC\n\n\nN\n\n\nN\n\n\n\n:kind/fn\nfn\n\nC\n\n\nE\n\n\nN\n\n\n\n:kind/fragment\nfragment\n\nC\n\n\nN\n\n\nN\n\n\n\n:kind/hiccup\nhiccup\n\nC\n\n\nC\n\n\nC\n\n\n\n:kind/hidden\nhidden\n\nC\n\n\nC\n\n\nN\n\n\n\n:kind/highcharts\nhighcharts\n\nC\n\n\nC\n\n\nN\n\n\n\n:kind/html\nhtml\n\nC\n\n\nC\n\n\nN\n\n\n\n:kind/htmlwidgets-ggplotly\nhtmlwidgets-ggplotly\n\nC\n\n\nN\n\n\nU\n\n\n\n:kind/htmlwidgets-plotly\nhtmlwidgets-plotly\n\nC\n\n\nN\n\n\nN\n\n\n\n:kind/image\nimage\n\nC\n\n\nC\n\n\nR\n\n\n\n:kind/map\nmap\n\nC\n\n\nR\n\n\nC\n\n\n\n:kind/md\nmd\n\nC\n\n\nC\n\n\nC\n\n\n\n:kind/observable\nobservable\n\nC\n\n\nN\n\n\nN\n\n\n\n:kind/plotly\nplotly\n\nC\n\n\nC\n\n\nC\n\n\n\n:kind/portal\nportal\n\nC\n\n\nN\n\n\nN\n\n\n\n:kind/pprint\npprint\n\nC\n\n\nR\n\n\nN\n\n\n\n:kind/reagent\nreagent\n\nC\n\n\nN\n\n\nN\n\n\n\n:kind/scittle\nscittle\n\nC\n\n\nN\n\n\nN\n\n\n\n:kind/seq\nseq\n\nC\n\n\nR\n\n\nC\n\n\n\n:kind/set\nset\n\nC\n\n\nR\n\n\nC\n\n\n\n:kind/smile-model\nsmile-model\n\nC\n\n\nN\n\n\nN\n\n\n\n:kind/table\ntable\n\nC\n\n\nR\n\n\nR\n\n\n\n:kind/test\ntest\n\nC\n\n\nR\n\n\nN\n\n\n\n:kind/test-last\ntest-last\n\nC\n\n\nR\n\n\nN\n\n\n\n:kind/tex\ntex\n\nC\n\n\nR\n\n\nN\n\n\n\n:kind/var\nvar\n\nC\n\n\nN\n\n\nN\n\n\n\n:kind/vector\nvector\n\nC\n\n\nR\n\n\nC\n\n\n\n:kind/vega\nvega\n\nC\n\n\nN\n\n\nC\n\n\n\n:kind/vega-lite\nvega-lite\n\nC\n\n\nC\n\n\nC\n\n\n\n:kind/video\nvideo\n\nC\n\n\nR\n\n\nN\n\n\n\n\n\n\n\nsource: notebooks/kind_compatibility.clj",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Kind compatibility matrix</span>"
    ]
  },
  {
    "objectID": "emmy_viewers.html",
    "href": "emmy_viewers.html",
    "title": "5  Emmy-viewers",
    "section": "",
    "text": "5.1 Usage\nThis namespace discusses Kindly’s support for Emmy-viewers.\nHere, we will not explain the full usage of Emmy-viewers. It is recommended to look into the project’ docs.\nForms generated by emmy-viewers are recognized as kind/emmy-viewers and displayed accordingly.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Emmy-viewers</span>"
    ]
  },
  {
    "objectID": "emmy_viewers.html#usage",
    "href": "emmy_viewers.html#usage",
    "title": "5  Emmy-viewers",
    "section": "",
    "text": "(mafs/of-x e/sin {:color :blue})",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Emmy-viewers</span>"
    ]
  },
  {
    "objectID": "emmy_viewers.html#a-few-detials-behind-the-scenes",
    "href": "emmy_viewers.html#a-few-detials-behind-the-scenes",
<<<<<<< HEAD
    "title": "4  Emmy-viewers",
    "section": "4.2 A few detials behind the scenes",
    "text": "4.2 A few detials behind the scenes\nIn the example above, we used emmy-viewers to generate a Clojurescript expression that can be interpreted as a Reagent component. Here is the actual expression:\n\n(kind/pprint\n (mafs/of-x e/sin))\n\n\n(reagent.core/with-let\n [G__87018 (js/Function. \"y0001\" \"  return Math.sin(y0001);\")]\n [mafs.plot/OfX {:y G__87018}])\n\nBy default, it is inferred to be of :kind/emmy-viewers, and is handle accordingly.\nEquivalently, we could also handle it more explicitly with :kind/reagent:\n\n(kind/reagent\n [`(fn []\n     ~(ev/expand (mafs/of-x e/sin)))]\n {:html/deps [:emmy-viewers]})",
=======
    "title": "5  Emmy-viewers",
    "section": "5.2 A few detials behind the scenes",
    "text": "5.2 A few detials behind the scenes\nIn the example above, we used emmy-viewers to generate a Clojurescript expression that can be interpreted as a Reagent component. Here is the actual expression:\n\n(kind/pprint\n (mafs/of-x e/sin))\n\n\n(reagent.core/with-let\n [G__86217 (js/Function. \"y0001\" \"  return Math.sin(y0001);\")]\n [mafs.plot/OfX {:y G__86217}])\n\nBy default, it is inferred to be of :kind/emmy-viewers, and is handle accordingly.\nEquivalently, we could also handle it more explicitly with :kind/reagent:\n\n(kind/reagent\n [`(fn []\n     ~(ev/expand (mafs/of-x e/sin)))]\n {:html/deps [:emmy-viewers]})",
>>>>>>> feb0693846b701aef12dd252e2d37396dc0dfa43
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Emmy-viewers</span>"
    ]
  },
  {
    "objectID": "emmy_viewers.html#more-examples",
    "href": "emmy_viewers.html#more-examples",
    "title": "5  Emmy-viewers",
    "section": "5.3 More examples",
    "text": "5.3 More examples\n\n(ev/with-let [!phase [0 0]]\n  (let [shifted (ev/with-params {:atom !phase :params [0]}\n                  (fn [shift]\n                    (fn [x]\n                      (((cube D) tanh) (e/- x shift)))))]\n    (mafs/mafs\n     {:height 400}\n     (mafs/cartesian)\n     (mafs/of-x shifted)\n     (mafs/movable-point\n      {:atom !phase :constrain \"horizontal\"})\n     (mafs/inequality\n      {:y {:&lt;= shifted :&gt; cos} :color :blue}))))\n\n\nTry moving the pink mark. 👆\n\nsource: notebooks/emmy_viewers.clj",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Emmy-viewers</span>"
    ]
  },
  {
    "objectID": "kindly_advice.html",
    "href": "kindly_advice.html",
    "title": "6  Kindly-advice",
    "section": "",
    "text": "6.1 Status\nKindly-advice is a small library to advise Clojure data visualization and notebook tools how to display forms and values, following the Kindly convention.\nKindly-advice will stabilize soon and is currently getting feedback from tool-makers.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Kindly-advice</span>"
    ]
  },
  {
    "objectID": "kindly_advice.html#goal",
    "href": "kindly_advice.html#goal",
    "title": "6  Kindly-advice",
    "section": "6.2 Goal",
    "text": "6.2 Goal\n\nprovide tools with the necessary information to support Kindly\nhave sensible defaults\nbe user-extensible",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Kindly-advice</span>"
    ]
  },
  {
    "objectID": "kindly_advice.html#asking-for-advice",
    "href": "kindly_advice.html#asking-for-advice",
<<<<<<< HEAD
    "title": "5  Kindly-advice",
    "section": "5.3 Asking for advice",
    "text": "5.3 Asking for advice\n\n(-&gt; {:value (kind/hiccup\n             [:div [:h1 \"hello\"]])}\n    kindly-advice/advise\n    kind/pprint)\n\n\n{:value [:div [:h1 \"hello\"]],\n :meta-kind :kind/hiccup,\n :kindly/options {},\n :kind :kind/hiccup,\n :advice\n [[:kind/hiccup]\n  [:kind/hiccup {:reason :metadata}]\n  [:kind/vector {:reason :predicate}]\n  [:kind/seq {:reason :predicate}]]}\n\nThe :kind field is the important one, expressing the bottom line of the inference: Kindly-advice recommends the tool handles this value as Hiccup.\nThe tool’s job will usually be to display the :value field based on the :kind field.\nIn the following example, we are asking for advice for given form (annotated by Kindly in this example). Kindly-advice evaluates the form and adds the resulting value to complete the context. This completion will only take place if the value is missing. It is recommended that tools will take care of evaluation themselves and pass the complete context to Kindly-advice. Doing so allows the tool to handle Exceptions better, among other things. Kindly-advice checks both the form and value for metadata. The metadata might not be present on the value.\n\n(-&gt; {:form ^:kind/hiccup\n     [:div [:h1 \"hello\"]]}\n    kindly-advice/advise\n    kind/pprint)\n\n\n{:form [:div [:h1 \"hello\"]],\n :value [:div [:h1 \"hello\"]],\n :meta-kind :kind/hiccup,\n :kindly/options {},\n :kind :kind/hiccup,\n :advice\n [[:kind/hiccup]\n  [:kind/hiccup {:reason :metadata}]\n  [:kind/vector {:reason :predicate}]\n  [:kind/seq {:reason :predicate}]]}\n\nSometimes, there is no inferred kind, as no metadata or relevant predicates say anything useful:\n\n(-&gt; {:form '(+ 1 2)}\n    kindly-advice/advise\n    kind/pprint)\n\n\n{:form (+ 1 2),\n :value 3,\n :meta-kind nil,\n :kindly/options {},\n :advice []}\n\nIn some situations, the kind inferred by predicates. Kindly-advice has a list of default predicates, which can be extended by the user. In the following example, it recognizes a dataset created by Tablecloth.\n\n(require '[tablecloth.api :as tc])\n\n\n(-&gt; {:value (tc/dataset {:x (range 4)})}\n    kindly-advice/advise\n    kind/pprint)\n\n\n{:value _unnamed [4 1]:\n\n| :x |\n|---:|\n|  0 |\n|  1 |\n|  2 |\n|  3 |\n,\n :meta-kind nil,\n :kindly/options {},\n :kind :kind/dataset,\n :advice\n [[:kind/dataset {:reason :predicate}]\n  [:kind/map {:reason :predicate}]]}",
=======
    "title": "6  Kindly-advice",
    "section": "6.3 Asking for advice",
    "text": "6.3 Asking for advice\n\n(-&gt; {:value (kind/hiccup\n             [:div [:h1 \"hello\"]])}\n    kindly-advice/advise\n    kind/pprint)\n\n\n{:value [:div [:h1 \"hello\"]],\n :meta-kind :kind/hiccup,\n :kindly/options {},\n :kind :kind/hiccup,\n :advice\n [[:kind/hiccup]\n  [:kind/hiccup {:reason :metadata}]\n  [:kind/vector {:reason :predicate}]\n  [:kind/seq {:reason :predicate}]]}\n\nThe :kind field is the important one, expressing the bottom line of the inference: Kindly-advice recommends the tool handles this value as Hiccup.\nThe tool’s job will usually be to display the :value field based on the :kind field.\nIn the following example, we are asking for advice for given form (annotated by Kindly in this example). Kindly-advice evaluates the form and adds the resulting value to complete the context. This completion will only take place if the value is missing. It is recommended that tools will take care of evaluation themselves and pass the complete context to Kindly-advice. Doing so allows the tool to handle Exceptions better, among other things. Kindly-advice checks both the form and value for metadata. The metadata might not be present on the value.\n\n(-&gt; {:form ^:kind/hiccup\n     [:div [:h1 \"hello\"]]}\n    kindly-advice/advise\n    kind/pprint)\n\n\n{:form [:div [:h1 \"hello\"]],\n :value [:div [:h1 \"hello\"]],\n :meta-kind :kind/hiccup,\n :kindly/options {},\n :kind :kind/hiccup,\n :advice\n [[:kind/hiccup]\n  [:kind/hiccup {:reason :metadata}]\n  [:kind/vector {:reason :predicate}]\n  [:kind/seq {:reason :predicate}]]}\n\nSometimes, there is no inferred kind, as no metadata or relevant predicates say anything useful:\n\n(-&gt; {:form '(+ 1 2)}\n    kindly-advice/advise\n    kind/pprint)\n\n\n{:form (+ 1 2),\n :value 3,\n :meta-kind nil,\n :kindly/options {},\n :advice []}\n\nIn some situations, the kind inferred by predicates. Kindly-advice has a list of default predicates, which can be extended by the user. In the following example, it recognizes a dataset created by Tablecloth.\n\n(require '[tablecloth.api :as tc])\n\n\n(-&gt; {:value (tc/dataset {:x (range 4)})}\n    kindly-advice/advise\n    kind/pprint)\n\n\n{:value _unnamed [4 1]:\n\n| :x |\n|---:|\n|  0 |\n|  1 |\n|  2 |\n|  3 |\n,\n :meta-kind nil,\n :kindly/options {},\n :kind :kind/dataset,\n :advice\n [[:kind/dataset {:reason :predicate}]\n  [:kind/map {:reason :predicate}]]}",
>>>>>>> feb0693846b701aef12dd252e2d37396dc0dfa43
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Kindly-advice</span>"
    ]
  },
  {
    "objectID": "kindly_advice.html#examples",
    "href": "kindly_advice.html#examples",
    "title": "6  Kindly-advice",
    "section": "6.4 Examples",
    "text": "6.4 Examples\nKindly-advice is used by the following projects:\n\nkind-portal\nkind-clerk\nread-kinds\nClay\n\nFor tool makers looking to support Kindly, the kind-portal implementation is a good example to start from.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Kindly-advice</span>"
    ]
  },
  {
    "objectID": "kindly_advice.html#extending",
    "href": "kindly_advice.html#extending",
<<<<<<< HEAD
    "title": "5  Kindly-advice",
    "section": "5.5 Extending",
    "text": "5.5 Extending\nOne my extend kindly-advice to perform custom kind inference.\nIn the following example, we add our own advisor, which recognizes vectors beginning with a :div keyword as :kind/hiccup.\n\n(def my-advisor\n  (fn [{:keys [value]}]\n    (if (and (vector? value)\n             (-&gt; value first (= :div)))\n      [[:kind/hiccup]])))\n\n\n(kindly-advice/set-advisors!\n (cons #'my-advisor\n       kindly-advice/default-advisors))\n\n\n(#'kindly-advice/my-advisor\n #function[scicloj.kindly-advice.v1.advisors/meta-kind-advisor]\n #function[scicloj.kindly-advice.v1.advisors/predicate-based-advisor/fn--39092])\n\n\n(-&gt; {:form '[:div [:p \"hello\"]]}\n    kindly-advice/advise\n    kind/pprint)\n\n\n{:form [:div [:p \"hello\"]],\n :value [:div [:p \"hello\"]],\n :meta-kind nil,\n :kindly/options {},\n :kind :kind/hiccup,\n :advice\n [[:kind/hiccup]\n  [:kind/vector {:reason :predicate}]\n  [:kind/seq {:reason :predicate}]]}\n\n\nsource: notebooks/kindly_advice.clj",
=======
    "title": "6  Kindly-advice",
    "section": "6.5 Extending",
    "text": "6.5 Extending\nOne my extend kindly-advice to perform custom kind inference.\nIn the following example, we add our own advisor, which recognizes vectors beginning with a :div keyword as :kind/hiccup.\n\n(def my-advisor\n  (fn [{:keys [value]}]\n    (if (and (vector? value)\n             (-&gt; value first (= :div)))\n      [[:kind/hiccup]])))\n\n\n(kindly-advice/set-advisors!\n (cons #'my-advisor\n       kindly-advice/default-advisors))\n\n\n(#'kindly-advice/my-advisor\n #function[scicloj.kindly-advice.v1.advisors/meta-kind-advisor]\n #function[scicloj.kindly-advice.v1.advisors/predicate-based-advisor/fn--39092])\n\n\n(-&gt; {:form '[:div [:p \"hello\"]]}\n    kindly-advice/advise\n    kind/pprint)\n\n\n{:form [:div [:p \"hello\"]],\n :value [:div [:p \"hello\"]],\n :meta-kind nil,\n :kindly/options {},\n :kind :kind/hiccup,\n :advice\n [[:kind/hiccup]\n  [:kind/vector {:reason :predicate}]\n  [:kind/seq {:reason :predicate}]]}\n\n\nsource: notebooks/kindly_advice.clj",
>>>>>>> feb0693846b701aef12dd252e2d37396dc0dfa43
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Kindly-advice</span>"
    ]
  }
]